!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
DES_FAILED	libc.h	/^int DES_FAILED (int err);$/;"	p	signature:(int err)
_Exit	libc.h	/^void _Exit (int status);$/;"	p	signature:(int status)
__fbufsize	libc.h	/^size_t __fbufsize (FILE *stream);$/;"	p	signature:(FILE *stream)
__flbf	libc.h	/^int __flbf (FILE *stream);$/;"	p	signature:(FILE *stream)
__fpending	libc.h	/^size_t __fpending (FILE *stream) The __fpending;$/;"	v
__fpurge	libc.h	/^void __fpurge (FILE *stream);$/;"	p	signature:(FILE *stream)
__freadable	libc.h	/^int __freadable (FILE *stream);$/;"	p	signature:(FILE *stream)
__freading	libc.h	/^int __freading (FILE *stream);$/;"	p	signature:(FILE *stream)
__fsetlocking	libc.h	/^int __fsetlocking (FILE *stream, int type);$/;"	p	signature:(FILE *stream, int type)
__fwritable	libc.h	/^int __fwritable (FILE *stream);$/;"	p	signature:(FILE *stream)
__fwriting	libc.h	/^int __fwriting (FILE *stream);$/;"	p	signature:(FILE *stream)
_exit	libc.h	/^void _exit (int status);$/;"	p	signature:(int status)
_flushlbf	libc.h	/^void _flushlbf (void);$/;"	p	signature:(void)
_tolower	libc.h	/^int _tolower (int c);$/;"	p	signature:(int c)
_toupper	libc.h	/^int _toupper (int c);$/;"	p	signature:(int c)
a64l	libc.h	/^long int a64l (const char *string);$/;"	p	signature:(const char *string)
abort	libc.h	/^void abort (void);$/;"	p	signature:(void)
abs	libc.h	/^int abs (int number);$/;"	p	signature:(int number)
accept	libc.h	/^int accept (int socket, struct sockaddr *addr, socklen_t *length_ptr);$/;"	p	signature:(int socket, struct sockaddr *addr, socklen_t *length_ptr)
access	libc.h	/^int access (const char *filename, int how);$/;"	p	signature:(const char *filename, int how)
acos	libc.h	/^double acos (double x);$/;"	p	signature:(double x)
acosh	libc.h	/^double acosh (double x);$/;"	p	signature:(double x)
addmntent	libc.h	/^int addmntent (FILE *stream, const struct mntent *mnt);$/;"	p	signature:(FILE *stream, const struct mntent *mnt)
addseverity	libc.h	/^int addseverity (int severity, const char *string);$/;"	p	signature:(int severity, const char *string)
adjtime	libc.h	/^int adjtime (const struct timeval *delta, struct timeval *olddelta);$/;"	p	signature:(const struct timeval *delta, struct timeval *olddelta)
adjtimex	libc.h	/^int adjtimex (struct timex *timex);$/;"	p	signature:(struct timex *timex)
aio_cancel	libc.h	/^int aio_cancel (int fildes, struct aiocb *aiocbp);$/;"	p	signature:(int fildes, struct aiocb *aiocbp)
aio_cancel64	libc.h	/^int aio_cancel64 (int fildes, struct aiocb64 *aiocbp);$/;"	p	signature:(int fildes, struct aiocb64 *aiocbp)
aio_error	libc.h	/^int aio_error (const struct aiocb *aiocbp);$/;"	p	signature:(const struct aiocb *aiocbp)
aio_error64	libc.h	/^int aio_error64 (const struct aiocb64 *aiocbp);$/;"	p	signature:(const struct aiocb64 *aiocbp)
aio_fsync	libc.h	/^int aio_fsync (int op, struct aiocb *aiocbp);$/;"	p	signature:(int op, struct aiocb *aiocbp)
aio_fsync64	libc.h	/^int aio_fsync64 (int op, struct aiocb64 *aiocbp);$/;"	p	signature:(int op, struct aiocb64 *aiocbp)
aio_init	libc.h	/^void aio_init (const struct aioinit *init);$/;"	p	signature:(const struct aioinit *init)
aio_read	libc.h	/^int aio_read (struct aiocb *aiocbp);$/;"	p	signature:(struct aiocb *aiocbp)
aio_read64	libc.h	/^int aio_read64 (struct aiocb *aiocbp);$/;"	p	signature:(struct aiocb *aiocbp)
aio_return	libc.h	/^ssize_t aio_return (const struct aiocb *aiocbp);$/;"	p	signature:(const struct aiocb *aiocbp)
aio_return64	libc.h	/^int aio_return64 (const struct aiocb64 *aiocbp);$/;"	p	signature:(const struct aiocb64 *aiocbp)
aio_suspend	libc.h	/^int aio_suspend (const struct aiocb *const list[], int nent, const struct timespec *timeout);$/;"	p	signature:(const struct aiocb *const list[], int nent, const struct timespec *timeout)
aio_suspend64	libc.h	/^int aio_suspend64 (const struct aiocb64 *const list[], int nent, const struct timespec *timeout);$/;"	p	signature:(const struct aiocb64 *const list[], int nent, const struct timespec *timeout)
aio_write	libc.h	/^int aio_write (struct aiocb *aiocbp);$/;"	p	signature:(struct aiocb *aiocbp)
aio_write64	libc.h	/^int aio_write64 (struct aiocb *aiocbp);$/;"	p	signature:(struct aiocb *aiocbp)
alarm	libc.h	/^unsigned int alarm (unsigned int seconds);$/;"	p	signature:(unsigned int seconds)
alloca	libc.h	/^void * alloca (size_t size);;$/;"	p	signature:(size_t size)
alphasort	libc.h	/^int alphasort (const void *a, const void *b);$/;"	p	signature:(const void *a, const void *b)
alphasort64	libc.h	/^int alphasort64 (const void *a, const void *b);$/;"	p	signature:(const void *a, const void *b)
argp_error	libc.h	/^void argp_error (const struct argp_state *state, const char *fmt, ...);$/;"	p	signature:(const struct argp_state *state, const char *fmt, ...)
argp_failure	libc.h	/^void argp_failure (const struct argp_state *state, int status, int errnum, const char *fmt, ...);$/;"	p	signature:(const struct argp_state *state, int status, int errnum, const char *fmt, ...)
argp_help	libc.h	/^void argp_help (const struct argp *argp, FILE *stream, unsigned flags, char *name);$/;"	p	signature:(const struct argp *argp, FILE *stream, unsigned flags, char *name)
argp_parse	libc.h	/^error_t argp_parse (const struct argp *argp, int argc, char **argv, unsigned flags, int *arg_index, void *input);$/;"	p	signature:(const struct argp *argp, int argc, char **argv, unsigned flags, int *arg_index, void *input)
argp_state_help	libc.h	/^void argp_state_help (const struct argp_state *state, FILE *stream, unsigned flags);$/;"	p	signature:(const struct argp_state *state, FILE *stream, unsigned flags)
argp_usage	libc.h	/^void argp_usage (const struct argp_state *state);$/;"	p	signature:(const struct argp_state *state)
argz_add	libc.h	/^error_t argz_add (char **argz, size_t *argz_len, const char *str);$/;"	p	signature:(char **argz, size_t *argz_len, const char *str)
argz_add_sep	libc.h	/^error_t argz_add_sep (char **argz, size_t *argz_len, const char *str, int delim);$/;"	p	signature:(char **argz, size_t *argz_len, const char *str, int delim)
argz_append	libc.h	/^error_t argz_append (char **argz, size_t *argz_len, const char *buf, size_t buf_len);$/;"	p	signature:(char **argz, size_t *argz_len, const char *buf, size_t buf_len)
argz_count	libc.h	/^size_t argz_count (const char *argz, size_t arg_len);$/;"	p	signature:(const char *argz, size_t arg_len)
argz_create	libc.h	/^error_t argz_create (char *const argv[], char **argz, size_t *argz_len);$/;"	p	signature:(char *const argv[], char **argz, size_t *argz_len)
argz_create_sep	libc.h	/^error_t argz_create_sep (const char *string, int sep, char **argz, size_t *argz_len);$/;"	p	signature:(const char *string, int sep, char **argz, size_t *argz_len)
argz_delete	libc.h	/^void argz_delete (char **argz, size_t *argz_len, char *entry);$/;"	p	signature:(char **argz, size_t *argz_len, char *entry)
argz_extract	libc.h	/^void argz_extract (char *argz, size_t argz_len, char **argv);$/;"	p	signature:(char *argz, size_t argz_len, char **argv)
argz_insert	libc.h	/^error_t argz_insert (char **argz, size_t *argz_len, char *before, const char *entry);$/;"	p	signature:(char **argz, size_t *argz_len, char *before, const char *entry)
argz_next	libc.h	/^char * argz_next (char *argz, size_t argz_len, const char *entry);$/;"	p	signature:(char *argz, size_t argz_len, const char *entry)
argz_replace	libc.h	/^error_t argz_replace (char **argz, size_t *argz_len, const char *str, const char *with, unsigned *replace_count);$/;"	p	signature:(char **argz, size_t *argz_len, const char *str, const char *with, unsigned *replace_count)
argz_stringify	libc.h	/^void argz_stringify (char *argz, size_t len, int sep);$/;"	p	signature:(char *argz, size_t len, int sep)
asctime	libc.h	/^char * asctime (const struct tm *brokentime);$/;"	p	signature:(const struct tm *brokentime)
asctime_r	libc.h	/^char * asctime_r (const struct tm *brokentime, char *buffer);$/;"	p	signature:(const struct tm *brokentime, char *buffer)
asin	libc.h	/^double asin (double x);$/;"	p	signature:(double x)
asinh	libc.h	/^double asinh (double x);$/;"	p	signature:(double x)
asprintf	libc.h	/^int asprintf (char **ptr, const char *format, ...);$/;"	p	signature:(char **ptr, const char *format, ...)
atan	libc.h	/^double atan (double x);$/;"	p	signature:(double x)
atan2	libc.h	/^double atan2 (double y, double x);$/;"	p	signature:(double y, double x)
atanh	libc.h	/^double atanh (double x);$/;"	p	signature:(double x)
atexit	libc.h	/^int atexit (void (*function) (void));$/;"	p	signature:(void (*function) (void))
atof	libc.h	/^double atof (const char *string);$/;"	p	signature:(const char *string)
atoi	libc.h	/^int atoi (const char *string);$/;"	p	signature:(const char *string)
atol	libc.h	/^long int atol (const char *string);$/;"	p	signature:(const char *string)
atoll	libc.h	/^long long int atoll (const char *string);$/;"	p	signature:(const char *string)
backtrace	libc.h	/^int backtrace (void **buffer, int size);$/;"	p	signature:(void **buffer, int size)
backtrace_symbols	libc.h	/^char ** backtrace_symbols (void *const *buffer, int size);$/;"	p	signature:(void *const *buffer, int size)
backtrace_symbols_fd	libc.h	/^void backtrace_symbols_fd (void *const *buffer, int size, int fd);$/;"	p	signature:(void *const *buffer, int size, int fd)
basename	libc.h	/^char * basename (char *path);$/;"	p	signature:(char *path)
basename	libc.h	/^char * basename (const char *filename);$/;"	p	signature:(const char *filename)
bcmp	libc.h	/^int bcmp (const void *a1, const void *a2, size_t size);$/;"	p	signature:(const void *a1, const void *a2, size_t size)
bcopy	libc.h	/^void bcopy (const void *from, void *to, size_t size);$/;"	p	signature:(const void *from, void *to, size_t size)
bind	libc.h	/^int bind (int socket, struct sockaddr *addr, socklen_t length);$/;"	p	signature:(int socket, struct sockaddr *addr, socklen_t length)
bind_textdomain_codeset	libc.h	/^char * bind_textdomain_codeset (const char *domainname, const char *codeset);$/;"	p	signature:(const char *domainname, const char *codeset)
bindtextdomain	libc.h	/^char * bindtextdomain (const char *domainname, const char *dirname);$/;"	p	signature:(const char *domainname, const char *dirname)
brk	libc.h	/^int brk (void *addr);$/;"	p	signature:(void *addr)
bsearch	libc.h	/^void * bsearch (const void *key, const void *array, size_t count, size_t size, comparison_fn_t compare);$/;"	p	signature:(const void *key, const void *array, size_t count, size_t size, comparison_fn_t compare)
btowc	libc.h	/^wint_t btowc (int c);$/;"	p	signature:(int c)
bzero	libc.h	/^void bzero (void *block, size_t size);$/;"	p	signature:(void *block, size_t size)
cabs	libc.h	/^double cabs (complex double z);$/;"	p	signature:(complex double z)
cacos	libc.h	/^complex double cacos (complex double z);$/;"	p	signature:(complex double z)
cacosh	libc.h	/^complex double cacosh (complex double z);$/;"	p	signature:(complex double z)
calloc	libc.h	/^void * calloc (size_t count, size_t eltsize);$/;"	p	signature:(size_t count, size_t eltsize)
canonicalize_file_name	libc.h	/^char * canonicalize_file_name (const char *name);$/;"	p	signature:(const char *name)
carg	libc.h	/^double carg (complex double z);$/;"	p	signature:(complex double z)
casin	libc.h	/^complex double casin (complex double z);$/;"	p	signature:(complex double z)
casinh	libc.h	/^complex double casinh (complex double z);$/;"	p	signature:(complex double z)
catan	libc.h	/^complex double catan (complex double z);$/;"	p	signature:(complex double z)
catanh	libc.h	/^complex double catanh (complex double z);$/;"	p	signature:(complex double z)
catclose	libc.h	/^int catclose (nl_catd catalog_desc);$/;"	p	signature:(nl_catd catalog_desc)
catgets	libc.h	/^char * catgets (nl_catd catalog_desc, int set, int message, const char *string);$/;"	p	signature:(nl_catd catalog_desc, int set, int message, const char *string)
catopen	libc.h	/^nl_catd catopen (const char *cat_name, int flag);$/;"	p	signature:(const char *cat_name, int flag)
cbc_crypt	libc.h	/^int cbc_crypt (char *key, char *blocks, unsigned len, unsigned mode, char *ivec);$/;"	p	signature:(char *key, char *blocks, unsigned len, unsigned mode, char *ivec)
cbrt	libc.h	/^double cbrt (double x);$/;"	p	signature:(double x)
ccos	libc.h	/^complex double ccos (complex double z);$/;"	p	signature:(complex double z)
ccosh	libc.h	/^complex double ccosh (complex double z);$/;"	p	signature:(complex double z)
ceil	libc.h	/^double ceil (double x);$/;"	p	signature:(double x)
cexp	libc.h	/^complex double cexp (complex double z);$/;"	p	signature:(complex double z)
cfgetispeed	libc.h	/^speed_t cfgetispeed (const struct termios *termios-p);$/;"	p	signature:(const struct termios *termios-p)
cfgetospeed	libc.h	/^speed_t cfgetospeed (const struct termios *termios-p);$/;"	p	signature:(const struct termios *termios-p)
cfmakeraw	libc.h	/^void cfmakeraw (struct termios *termios-p);$/;"	p	signature:(struct termios *termios-p)
cfree	libc.h	/^void cfree (void *ptr);$/;"	p	signature:(void *ptr)
cfsetispeed	libc.h	/^int cfsetispeed (struct termios *termios-p, speed_t speed);$/;"	p	signature:(struct termios *termios-p, speed_t speed)
cfsetospeed	libc.h	/^int cfsetospeed (struct termios *termios-p, speed_t speed);$/;"	p	signature:(struct termios *termios-p, speed_t speed)
cfsetspeed	libc.h	/^int cfsetspeed (struct termios *termios-p, speed_t speed);$/;"	p	signature:(struct termios *termios-p, speed_t speed)
chdir	libc.h	/^int chdir (const char *filename);$/;"	p	signature:(const char *filename)
chmod	libc.h	/^int chmod (const char *filename, mode_t mode);$/;"	p	signature:(const char *filename, mode_t mode)
chown	libc.h	/^int chown (const char *filename, uid_t owner, gid_t group);$/;"	p	signature:(const char *filename, uid_t owner, gid_t group)
cimag	libc.h	/^double cimag (complex double z);$/;"	p	signature:(complex double z)
clearenv	libc.h	/^int clearenv (void);$/;"	p	signature:(void)
clearerr	libc.h	/^void clearerr (FILE *stream);$/;"	p	signature:(FILE *stream)
clearerr_unlocked	libc.h	/^void clearerr_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
clock	libc.h	/^clock_t clock (void);$/;"	p	signature:(void)
clog	libc.h	/^complex double clog (complex double z);$/;"	p	signature:(complex double z)
clog10	libc.h	/^complex double clog10 (complex double z);$/;"	p	signature:(complex double z)
close	libc.h	/^int close (int filedes);$/;"	p	signature:(int filedes)
closedir	libc.h	/^int closedir (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
closelog	libc.h	/^void closelog (void);$/;"	p	signature:(void)
confstr	libc.h	/^size_t confstr (int parameter, char *buf, size_t len);$/;"	p	signature:(int parameter, char *buf, size_t len)
conj	libc.h	/^complex double conj (complex double z);$/;"	p	signature:(complex double z)
connect	libc.h	/^int connect (int socket, struct sockaddr *addr, socklen_t length);$/;"	p	signature:(int socket, struct sockaddr *addr, socklen_t length)
copysign	libc.h	/^double copysign (double x, double y);$/;"	p	signature:(double x, double y)
cos	libc.h	/^double cos (double x);$/;"	p	signature:(double x)
cosh	libc.h	/^double cosh (double x);$/;"	p	signature:(double x)
cpow	libc.h	/^complex double cpow (complex double base, complex double power);$/;"	p	signature:(complex double base, complex double power)
cproj	libc.h	/^complex double cproj (complex double z);$/;"	p	signature:(complex double z)
creal	libc.h	/^double creal (complex double z);$/;"	p	signature:(complex double z)
crypt	libc.h	/^char * crypt (const char *key, const char *salt);$/;"	p	signature:(const char *key, const char *salt)
crypt_r	libc.h	/^char * crypt_r (const char *key, const char *salt, struct crypt_data * data);$/;"	p	signature:(const char *key, const char *salt, struct crypt_data * data)
csin	libc.h	/^complex double csin (complex double z);$/;"	p	signature:(complex double z)
csinh	libc.h	/^complex double csinh (complex double z);$/;"	p	signature:(complex double z)
csqrt	libc.h	/^complex double csqrt (complex double z);$/;"	p	signature:(complex double z)
ctan	libc.h	/^complex double ctan (complex double z);$/;"	p	signature:(complex double z)
ctanh	libc.h	/^complex double ctanh (complex double z);$/;"	p	signature:(complex double z)
ctermid	libc.h	/^char * ctermid (char *string);$/;"	p	signature:(char *string)
ctime	libc.h	/^char * ctime (const time_t *time);$/;"	p	signature:(const time_t *time)
ctime_r	libc.h	/^char * ctime_r (const time_t *time, char *buffer);$/;"	p	signature:(const time_t *time, char *buffer)
cuserid	libc.h	/^char * cuserid (char *string);$/;"	p	signature:(char *string)
dcgettext	libc.h	/^char * dcgettext (const char *domainname, const char *msgid, int category);$/;"	p	signature:(const char *domainname, const char *msgid, int category)
dcngettext	libc.h	/^char * dcngettext (const char *domain, const char *msgid1, const char *msgid2, unsigned long int n, int category);$/;"	p	signature:(const char *domain, const char *msgid1, const char *msgid2, unsigned long int n, int category)
des_setparity	libc.h	/^void des_setparity (char *key);$/;"	p	signature:(char *key)
dgettext	libc.h	/^char * dgettext (const char *domainname, const char *msgid);$/;"	p	signature:(const char *domainname, const char *msgid)
difftime	libc.h	/^double difftime (time_t time1, time_t time0);$/;"	p	signature:(time_t time1, time_t time0)
dirfd	libc.h	/^int dirfd (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
dirname	libc.h	/^char * dirname (char *path);$/;"	p	signature:(char *path)
div	libc.h	/^div_t div (int numerator, int denominator);$/;"	p	signature:(int numerator, int denominator)
dngettext	libc.h	/^char * dngettext (const char *domain, const char *msgid1, const char *msgid2, unsigned long int n);$/;"	p	signature:(const char *domain, const char *msgid1, const char *msgid2, unsigned long int n)
drand48	libc.h	/^double drand48 (void);$/;"	p	signature:(void)
drand48_r	libc.h	/^int drand48_r (struct drand48_data *buffer, double *result);$/;"	p	signature:(struct drand48_data *buffer, double *result)
drem	libc.h	/^double drem (double numerator, double denominator);$/;"	p	signature:(double numerator, double denominator)
dup	libc.h	/^int dup (int old);$/;"	p	signature:(int old)
dup2	libc.h	/^int dup2 (int old, int new);$/;"	p	signature:(int old, int new)
ecb_crypt	libc.h	/^int ecb_crypt (char *key, char *blocks, unsigned len, unsigned mode);$/;"	p	signature:(char *key, char *blocks, unsigned len, unsigned mode)
ecvt	libc.h	/^char * ecvt (double value, int ndigit, int *decpt, int *neg);$/;"	p	signature:(double value, int ndigit, int *decpt, int *neg)
ecvt_r	libc.h	/^int ecvt_r (double value, int ndigit, int *decpt, int *neg, char *buf, size_t len);$/;"	p	signature:(double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
encrypt	libc.h	/^void encrypt (char *block, int edflag);$/;"	p	signature:(char *block, int edflag)
endfsent	libc.h	/^void endfsent (void);$/;"	p	signature:(void)
endgrent	libc.h	/^void endgrent (void);$/;"	p	signature:(void)
endhostent	libc.h	/^void endhostent (void);$/;"	p	signature:(void)
endmntent	libc.h	/^int endmntent (FILE *stream);$/;"	p	signature:(FILE *stream)
endnetent	libc.h	/^void endnetent (void);$/;"	p	signature:(void)
endnetgrent	libc.h	/^void endnetgrent (void);$/;"	p	signature:(void)
endprotoent	libc.h	/^void endprotoent (void);$/;"	p	signature:(void)
endpwent	libc.h	/^void endpwent (void);$/;"	p	signature:(void)
endservent	libc.h	/^void endservent (void);$/;"	p	signature:(void)
endutent	libc.h	/^void endutent (void);$/;"	p	signature:(void)
endutxent	libc.h	/^void endutxent (void);$/;"	p	signature:(void)
envz_add	libc.h	/^error_t envz_add (char **envz, size_t *envz_len, const char *name, const char *value);$/;"	p	signature:(char **envz, size_t *envz_len, const char *name, const char *value)
envz_entry	libc.h	/^char * envz_entry (const char *envz, size_t envz_len, const char *name);$/;"	p	signature:(const char *envz, size_t envz_len, const char *name)
envz_get	libc.h	/^char * envz_get (const char *envz, size_t envz_len, const char *name);$/;"	p	signature:(const char *envz, size_t envz_len, const char *name)
envz_merge	libc.h	/^error_t envz_merge (char **envz, size_t *envz_len, const char *envz2, size_t envz2_len, int override);$/;"	p	signature:(char **envz, size_t *envz_len, const char *envz2, size_t envz2_len, int override)
envz_strip	libc.h	/^void envz_strip (char **envz, size_t *envz_len);$/;"	p	signature:(char **envz, size_t *envz_len)
erand48	libc.h	/^double erand48 (unsigned short int xsubi[3]);$/;"	p	signature:(unsigned short int xsubi[3])
erand48_r	libc.h	/^int erand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, double *result);$/;"	p	signature:(unsigned short int xsubi[3], struct drand48_data *buffer, double *result)
erf	libc.h	/^double erf (double x);$/;"	p	signature:(double x)
erfc	libc.h	/^double erfc (double x);$/;"	p	signature:(double x)
err	libc.h	/^void err (int status, const char *format, ...);$/;"	p	signature:(int status, const char *format, ...)
error	libc.h	/^void error (int status, int errnum, const char *format, ...);$/;"	p	signature:(int status, int errnum, const char *format, ...)
error_at_line	libc.h	/^void error_at_line (int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...);$/;"	p	signature:(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
errx	libc.h	/^void errx (int status, const char *format, ...);$/;"	p	signature:(int status, const char *format, ...)
execl	libc.h	/^int execl (const char *filename, const char *arg0, ...);$/;"	p	signature:(const char *filename, const char *arg0, ...)
execle	libc.h	/^int execle (const char *filename, const char *arg0, char *const env[], ...);$/;"	p	signature:(const char *filename, const char *arg0, char *const env[], ...)
execlp	libc.h	/^int execlp (const char *filename, const char *arg0, ...);$/;"	p	signature:(const char *filename, const char *arg0, ...)
execv	libc.h	/^int execv (const char *filename, char *const argv[]);$/;"	p	signature:(const char *filename, char *const argv[])
execve	libc.h	/^int execve (const char *filename, char *const argv[], char *const env[]);$/;"	p	signature:(const char *filename, char *const argv[], char *const env[])
execvp	libc.h	/^int execvp (const char *filename, char *const argv[]);$/;"	p	signature:(const char *filename, char *const argv[])
exit	libc.h	/^void exit (int status);$/;"	p	signature:(int status)
exp	libc.h	/^double exp (double x);$/;"	p	signature:(double x)
exp10	libc.h	/^double exp10 (double x);$/;"	p	signature:(double x)
exp2	libc.h	/^double exp2 (double x);$/;"	p	signature:(double x)
expm1	libc.h	/^double expm1 (double x);$/;"	p	signature:(double x)
fabs	libc.h	/^double fabs (double number);$/;"	p	signature:(double number)
fchdir	libc.h	/^int fchdir (int filedes);$/;"	p	signature:(int filedes)
fchmod	libc.h	/^int fchmod (int filedes, int mode);$/;"	p	signature:(int filedes, int mode)
fchown	libc.h	/^int fchown (int filedes, int owner, int group);$/;"	p	signature:(int filedes, int owner, int group)
fclean	libc.h	/^int fclean (FILE *stream);$/;"	p	signature:(FILE *stream)
fclose	libc.h	/^int fclose (FILE *stream);$/;"	p	signature:(FILE *stream)
fcloseall	libc.h	/^int fcloseall (void);$/;"	p	signature:(void)
fcntl	libc.h	/^int fcntl (int filedes, int command, ...);$/;"	p	signature:(int filedes, int command, ...)
fcvt	libc.h	/^char * fcvt (double value, int ndigit, int *decpt, int *neg);$/;"	p	signature:(double value, int ndigit, int *decpt, int *neg)
fcvt_r	libc.h	/^int fcvt_r (double value, int ndigit, int *decpt, int *neg, char *buf, size_t len);$/;"	p	signature:(double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
fdatasync	libc.h	/^int fdatasync (int fildes);$/;"	p	signature:(int fildes)
fdim	libc.h	/^double fdim (double x, double y);$/;"	p	signature:(double x, double y)
fdopen	libc.h	/^FILE * fdopen (int filedes, const char *opentype);$/;"	p	signature:(int filedes, const char *opentype)
fdopendir	libc.h	/^DIR * fdopendir (int fd);$/;"	p	signature:(int fd)
feclearexcept	libc.h	/^int feclearexcept (int excepts);$/;"	p	signature:(int excepts)
fedisableexcept	libc.h	/^int fedisableexcept (int excepts);$/;"	p	signature:(int excepts)
feenableexcept	libc.h	/^int feenableexcept (int excepts);$/;"	p	signature:(int excepts)
fegetenv	libc.h	/^int fegetenv (fenv_t *envp);$/;"	p	signature:(fenv_t *envp)
fegetexcept	libc.h	/^int fegetexcept (int excepts);$/;"	p	signature:(int excepts)
fegetexceptflag	libc.h	/^int fegetexceptflag (fexcept_t *flagp, int excepts);$/;"	p	signature:(fexcept_t *flagp, int excepts)
fegetround	libc.h	/^int fegetround (void);$/;"	p	signature:(void)
feholdexcept	libc.h	/^int feholdexcept (fenv_t *envp);$/;"	p	signature:(fenv_t *envp)
feof	libc.h	/^int feof (FILE *stream);$/;"	p	signature:(FILE *stream)
feof_unlocked	libc.h	/^int feof_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
feraiseexcept	libc.h	/^int feraiseexcept (int excepts);$/;"	p	signature:(int excepts)
ferror	libc.h	/^int ferror (FILE *stream);$/;"	p	signature:(FILE *stream)
ferror_unlocked	libc.h	/^int ferror_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
fesetenv	libc.h	/^int fesetenv (const fenv_t *envp);$/;"	p	signature:(const fenv_t *envp)
fesetexceptflag	libc.h	/^int fesetexceptflag (const fexcept_t *flagp, int excepts);$/;"	p	signature:(const fexcept_t *flagp, int excepts)
fesetround	libc.h	/^int fesetround (int round);$/;"	p	signature:(int round)
fetestexcept	libc.h	/^int fetestexcept (int excepts);$/;"	p	signature:(int excepts)
feupdateenv	libc.h	/^int feupdateenv (const fenv_t *envp);$/;"	p	signature:(const fenv_t *envp)
fflush	libc.h	/^int fflush (FILE *stream);$/;"	p	signature:(FILE *stream)
fflush_unlocked	libc.h	/^int fflush_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetc	libc.h	/^int fgetc (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetc_unlocked	libc.h	/^int fgetc_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetgrent	libc.h	/^struct group * fgetgrent (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetgrent_r	libc.h	/^int fgetgrent_r (FILE *stream, struct group *result_buf, char *buffer, size_t buflen, struct group **result);$/;"	p	signature:(FILE *stream, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
fgetpos	libc.h	/^int fgetpos (FILE *stream, fpos_t *position);$/;"	p	signature:(FILE *stream, fpos_t *position)
fgetpos64	libc.h	/^int fgetpos64 (FILE *stream, fpos64_t *position);$/;"	p	signature:(FILE *stream, fpos64_t *position)
fgetpwent	libc.h	/^struct passwd * fgetpwent (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetpwent_r	libc.h	/^int fgetpwent_r (FILE *stream, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result);$/;"	p	signature:(FILE *stream, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
fgets	libc.h	/^char * fgets (char *s, int count, FILE *stream);$/;"	p	signature:(char *s, int count, FILE *stream)
fgets_unlocked	libc.h	/^char * fgets_unlocked (char *s, int count, FILE *stream);$/;"	p	signature:(char *s, int count, FILE *stream)
fgetwc	libc.h	/^wint_t fgetwc (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetwc_unlocked	libc.h	/^wint_t fgetwc_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
fgetws	libc.h	/^wchar_t * fgetws (wchar_t *ws, int count, FILE *stream);$/;"	p	signature:(wchar_t *ws, int count, FILE *stream)
fgetws_unlocked	libc.h	/^wchar_t * fgetws_unlocked (wchar_t *ws, int count, FILE *stream);$/;"	p	signature:(wchar_t *ws, int count, FILE *stream)
fileno	libc.h	/^int fileno (FILE *stream);$/;"	p	signature:(FILE *stream)
fileno_unlocked	libc.h	/^int fileno_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
finite	libc.h	/^int finite (double x);$/;"	p	signature:(double x)
flockfile	libc.h	/^void flockfile (FILE *stream);$/;"	p	signature:(FILE *stream)
floor	libc.h	/^double floor (double x);$/;"	p	signature:(double x)
fma	libc.h	/^double fma (double x, double y, double z);$/;"	p	signature:(double x, double y, double z)
fmax	libc.h	/^double fmax (double x, double y);$/;"	p	signature:(double x, double y)
fmemopen	libc.h	/^FILE * fmemopen (void *buf, size_t size, const char *opentype);$/;"	p	signature:(void *buf, size_t size, const char *opentype)
fmin	libc.h	/^double fmin (double x, double y);$/;"	p	signature:(double x, double y)
fmod	libc.h	/^double fmod (double numerator, double denominator);$/;"	p	signature:(double numerator, double denominator)
fmtmsg	libc.h	/^int fmtmsg (long int classification, const char *label, int severity, const char *text, const char *action, const char *tag);$/;"	p	signature:(long int classification, const char *label, int severity, const char *text, const char *action, const char *tag)
fnmatch	libc.h	/^int fnmatch (const char *pattern, const char *string, int flags);$/;"	p	signature:(const char *pattern, const char *string, int flags)
fopen	libc.h	/^FILE * fopen (const char *filename, const char *opentype);$/;"	p	signature:(const char *filename, const char *opentype)
fopen64	libc.h	/^FILE * fopen64 (const char *filename, const char *opentype);$/;"	p	signature:(const char *filename, const char *opentype)
fopencookie	libc.h	/^FILE * fopencookie (void *cookie, const char *opentype, cookie_io_functions_t io-functions);$/;"	p	signature:(void *cookie, const char *opentype, cookie_io_functions_t io-functions)
fork	libc.h	/^pid_t fork (void);$/;"	p	signature:(void)
forkpty	libc.h	/^int forkpty (int *amaster, char *name, const struct termios *termp, const struct winsize *winp);$/;"	p	signature:(int *amaster, char *name, const struct termios *termp, const struct winsize *winp)
fpathconf	libc.h	/^long int fpathconf (int filedes, int parameter);$/;"	p	signature:(int filedes, int parameter)
fprintf	libc.h	/^int fprintf (FILE *stream, const char *format, ...);$/;"	p	signature:(FILE *stream, const char *format, ...)
fputc	libc.h	/^int fputc (int c, FILE *stream);$/;"	p	signature:(int c, FILE *stream)
fputc_unlocked	libc.h	/^int fputc_unlocked (int c, FILE *stream);$/;"	p	signature:(int c, FILE *stream)
fputs	libc.h	/^int fputs (const char *s, FILE *stream);$/;"	p	signature:(const char *s, FILE *stream)
fputs_unlocked	libc.h	/^int fputs_unlocked (const char *s, FILE *stream);$/;"	p	signature:(const char *s, FILE *stream)
fputwc	libc.h	/^wint_t fputwc (wchar_t wc, FILE *stream);$/;"	p	signature:(wchar_t wc, FILE *stream)
fputwc_unlocked	libc.h	/^wint_t fputwc_unlocked (wint_t wc, FILE *stream);$/;"	p	signature:(wint_t wc, FILE *stream)
fputws	libc.h	/^int fputws (const wchar_t *ws, FILE *stream);$/;"	p	signature:(const wchar_t *ws, FILE *stream)
fputws_unlocked	libc.h	/^int fputws_unlocked (const wchar_t *ws, FILE *stream);$/;"	p	signature:(const wchar_t *ws, FILE *stream)
fread	libc.h	/^size_t fread (void *data, size_t size, size_t count, FILE *stream);$/;"	p	signature:(void *data, size_t size, size_t count, FILE *stream)
fread_unlocked	libc.h	/^size_t fread_unlocked (void *data, size_t size, size_t count, FILE *stream);$/;"	p	signature:(void *data, size_t size, size_t count, FILE *stream)
free	libc.h	/^void free (void *ptr);$/;"	p	signature:(void *ptr)
freopen	libc.h	/^FILE * freopen (const char *filename, const char *opentype, FILE *stream);$/;"	p	signature:(const char *filename, const char *opentype, FILE *stream)
freopen64	libc.h	/^FILE * freopen64 (const char *filename, const char *opentype, FILE *stream);$/;"	p	signature:(const char *filename, const char *opentype, FILE *stream)
frexp	libc.h	/^double frexp (double value, int *exponent);$/;"	p	signature:(double value, int *exponent)
fscanf	libc.h	/^int fscanf (FILE *stream, const char *format, ...);$/;"	p	signature:(FILE *stream, const char *format, ...)
fseek	libc.h	/^int fseek (FILE *stream, long int offset, int whence);$/;"	p	signature:(FILE *stream, long int offset, int whence)
fseeko	libc.h	/^int fseeko (FILE *stream, off_t offset, int whence);$/;"	p	signature:(FILE *stream, off_t offset, int whence)
fseeko64	libc.h	/^int fseeko64 (FILE *stream, off64_t offset, int whence);$/;"	p	signature:(FILE *stream, off64_t offset, int whence)
fsetpos	libc.h	/^int fsetpos (FILE *stream, const fpos_t *position);$/;"	p	signature:(FILE *stream, const fpos_t *position)
fsetpos64	libc.h	/^int fsetpos64 (FILE *stream, const fpos64_t *position);$/;"	p	signature:(FILE *stream, const fpos64_t *position)
fstat	libc.h	/^int fstat (int filedes, struct stat *buf);$/;"	p	signature:(int filedes, struct stat *buf)
fstat64	libc.h	/^int fstat64 (int filedes, struct stat64 *buf);$/;"	p	signature:(int filedes, struct stat64 *buf)
fsync	libc.h	/^int fsync (int fildes);$/;"	p	signature:(int fildes)
ftell	libc.h	/^long int ftell (FILE *stream);$/;"	p	signature:(FILE *stream)
ftello	libc.h	/^off_t ftello (FILE *stream);$/;"	p	signature:(FILE *stream)
ftello64	libc.h	/^off64_t ftello64 (FILE *stream);$/;"	p	signature:(FILE *stream)
ftruncate	libc.h	/^int ftruncate (int fd, off_t length);$/;"	p	signature:(int fd, off_t length)
ftruncate64	libc.h	/^int ftruncate64 (int id, off64_t length);$/;"	p	signature:(int id, off64_t length)
ftrylockfile	libc.h	/^int ftrylockfile (FILE *stream);$/;"	p	signature:(FILE *stream)
ftw	libc.h	/^int ftw (const char *filename, __ftw_func_t func, int descriptors);$/;"	p	signature:(const char *filename, __ftw_func_t func, int descriptors)
ftw64	libc.h	/^int ftw64 (const char *filename, __ftw64_func_t func, int descriptors);$/;"	p	signature:(const char *filename, __ftw64_func_t func, int descriptors)
funlockfile	libc.h	/^void funlockfile (FILE *stream);$/;"	p	signature:(FILE *stream)
futimes	libc.h	/^int futimes (int fd, struct timeval tvp[2]);$/;"	p	signature:(int fd, struct timeval tvp[2])
fwide	libc.h	/^int fwide (FILE *stream, int mode);$/;"	p	signature:(FILE *stream, int mode)
fwprintf	libc.h	/^int fwprintf (FILE *stream, const wchar_t *format, ...);$/;"	p	signature:(FILE *stream, const wchar_t *format, ...)
fwrite	libc.h	/^size_t fwrite (const void *data, size_t size, size_t count, FILE *stream);$/;"	p	signature:(const void *data, size_t size, size_t count, FILE *stream)
fwrite_unlocked	libc.h	/^size_t fwrite_unlocked (const void *data, size_t size, size_t count, FILE *stream);$/;"	p	signature:(const void *data, size_t size, size_t count, FILE *stream)
fwscanf	libc.h	/^int fwscanf (FILE *stream, const wchar_t *format, ...);$/;"	p	signature:(FILE *stream, const wchar_t *format, ...)
gamma	libc.h	/^double gamma (double x);$/;"	p	signature:(double x)
gcvt	libc.h	/^char * gcvt (double value, int ndigit, char *buf);$/;"	p	signature:(double value, int ndigit, char *buf)
get_avphys_pages	libc.h	/^long int get_avphys_pages (void);$/;"	p	signature:(void)
get_current_dir_name	libc.h	/^char * get_current_dir_name (void);$/;"	p	signature:(void)
get_nprocs	libc.h	/^int get_nprocs (void);$/;"	p	signature:(void)
get_nprocs_conf	libc.h	/^int get_nprocs_conf (void);$/;"	p	signature:(void)
get_phys_pages	libc.h	/^long int get_phys_pages (void);$/;"	p	signature:(void)
getc	libc.h	/^int getc (FILE *stream);$/;"	p	signature:(FILE *stream)
getc_unlocked	libc.h	/^int getc_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
getchar	libc.h	/^int getchar (void);$/;"	p	signature:(void)
getchar_unlocked	libc.h	/^int getchar_unlocked (void);$/;"	p	signature:(void)
getcontext	libc.h	/^int getcontext (ucontext_t *ucp);$/;"	p	signature:(ucontext_t *ucp)
getcwd	libc.h	/^char * getcwd (char *buffer, size_t size);$/;"	p	signature:(char *buffer, size_t size)
getdate	libc.h	/^struct tm * getdate (const char *string);$/;"	p	signature:(const char *string)
getdate_r	libc.h	/^int getdate_r (const char *string, struct tm *tp);$/;"	p	signature:(const char *string, struct tm *tp)
getdelim	libc.h	/^ssize_t getdelim (char **lineptr, size_t *n, int delimiter, FILE *stream);$/;"	p	signature:(char **lineptr, size_t *n, int delimiter, FILE *stream)
getdomainnname	libc.h	/^int getdomainnname (char *name, size_t length);$/;"	p	signature:(char *name, size_t length)
getegid	libc.h	/^gid_t getegid (void);$/;"	p	signature:(void)
getenv	libc.h	/^char * getenv (const char *name);$/;"	p	signature:(const char *name)
geteuid	libc.h	/^uid_t geteuid (void);$/;"	p	signature:(void)
getfsent	libc.h	/^struct fstab * getfsent (void);$/;"	p	signature:(void)
getfsfile	libc.h	/^struct fstab * getfsfile (const char *name);$/;"	p	signature:(const char *name)
getfsspec	libc.h	/^struct fstab * getfsspec (const char *name);$/;"	p	signature:(const char *name)
getgid	libc.h	/^gid_t getgid (void);$/;"	p	signature:(void)
getgrent	libc.h	/^struct group * getgrent (void);$/;"	p	signature:(void)
getgrent_r	libc.h	/^int getgrent_r (struct group *result_buf, char *buffer, size_t buflen, struct group **result);$/;"	p	signature:(struct group *result_buf, char *buffer, size_t buflen, struct group **result)
getgrgid	libc.h	/^struct group * getgrgid (gid_t gid);$/;"	p	signature:(gid_t gid)
getgrgid_r	libc.h	/^int getgrgid_r (gid_t gid, struct group *result_buf, char *buffer, size_t buflen, struct group **result);$/;"	p	signature:(gid_t gid, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
getgrnam	libc.h	/^struct group * getgrnam (const char *name);$/;"	p	signature:(const char *name)
getgrnam_r	libc.h	/^int getgrnam_r (const char *name, struct group *result_buf, char *buffer, size_t buflen, struct group **result);$/;"	p	signature:(const char *name, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
getgrouplist	libc.h	/^int getgrouplist (const char *user, gid_t group, gid_t *groups, int *ngroups);$/;"	p	signature:(const char *user, gid_t group, gid_t *groups, int *ngroups)
getgroups	libc.h	/^int getgroups (int count, gid_t *groups);$/;"	p	signature:(int count, gid_t *groups)
gethostbyaddr	libc.h	/^struct hostent * gethostbyaddr (const char *addr, size_t length, int format);$/;"	p	signature:(const char *addr, size_t length, int format)
gethostbyaddr_r	libc.h	/^int gethostbyaddr_r (const char *addr, size_t length, int format, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop);$/;"	p	signature:(const char *addr, size_t length, int format, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
gethostbyname	libc.h	/^struct hostent * gethostbyname (const char *name);$/;"	p	signature:(const char *name)
gethostbyname2	libc.h	/^struct hostent * gethostbyname2 (const char *name, int af);$/;"	p	signature:(const char *name, int af)
gethostbyname2_r	libc.h	/^int gethostbyname2_r (const char *name, int af, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop);$/;"	p	signature:(const char *name, int af, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
gethostbyname_r	libc.h	/^int gethostbyname_r (const char *restrict name, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop);$/;"	p	signature:(const char *restrict name, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
gethostent	libc.h	/^struct hostent * gethostent (void);$/;"	p	signature:(void)
gethostid	libc.h	/^long int gethostid (void);$/;"	p	signature:(void)
gethostname	libc.h	/^int gethostname (char *name, size_t size);$/;"	p	signature:(char *name, size_t size)
getitimer	libc.h	/^int getitimer (int which, struct itimerval *old);$/;"	p	signature:(int which, struct itimerval *old)
getline	libc.h	/^ssize_t getline (char **lineptr, size_t *n, FILE *stream);$/;"	p	signature:(char **lineptr, size_t *n, FILE *stream)
getloadavg	libc.h	/^int getloadavg (double loadavg[], int nelem);$/;"	p	signature:(double loadavg[], int nelem)
getlogin	libc.h	/^char * getlogin (void);$/;"	p	signature:(void)
getmntent	libc.h	/^struct mntent * getmntent (FILE *stream);$/;"	p	signature:(FILE *stream)
getmntent_r	libc.h	/^struct mntent * getmntent_r (FILE *stream, struct mentent *result, char *buffer, int bufsize);$/;"	p	signature:(FILE *stream, struct mentent *result, char *buffer, int bufsize)
getnetbyaddr	libc.h	/^struct netent * getnetbyaddr (unsigned long int net, int type);$/;"	p	signature:(unsigned long int net, int type)
getnetbyname	libc.h	/^struct netent * getnetbyname (const char *name);$/;"	p	signature:(const char *name)
getnetent	libc.h	/^struct netent * getnetent (void);$/;"	p	signature:(void)
getnetgrent	libc.h	/^int getnetgrent (char **hostp, char **userp, char **domainp);$/;"	p	signature:(char **hostp, char **userp, char **domainp)
getnetgrent_r	libc.h	/^int getnetgrent_r (char **hostp, char **userp, char **domainp, char *buffer, int buflen);$/;"	p	signature:(char **hostp, char **userp, char **domainp, char *buffer, int buflen)
getopt	libc.h	/^int getopt (int argc, char **argv, const char *options);$/;"	p	signature:(int argc, char **argv, const char *options)
getopt_long	libc.h	/^int getopt_long (int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr);$/;"	p	signature:(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr)
getopt_long_only	libc.h	/^int getopt_long_only (int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr);$/;"	p	signature:(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr)
getpagesize	libc.h	/^int getpagesize (void);$/;"	p	signature:(void)
getpass	libc.h	/^char * getpass (const char *prompt);$/;"	p	signature:(const char *prompt)
getpeername	libc.h	/^int getpeername (int socket, struct sockaddr *addr, socklen_t *length-ptr);$/;"	p	signature:(int socket, struct sockaddr *addr, socklen_t *length-ptr)
getpid	libc.h	/^pid_t getpid (void);$/;"	p	signature:(void)
getppid	libc.h	/^pid_t getppid (void);$/;"	p	signature:(void)
getpriority	libc.h	/^int getpriority (int class, int id);$/;"	p	signature:(int class, int id)
getprotobyname	libc.h	/^struct protoent * getprotobyname (const char *name);$/;"	p	signature:(const char *name)
getprotobynumber	libc.h	/^struct protoent * getprotobynumber (int protocol);$/;"	p	signature:(int protocol)
getprotoent	libc.h	/^struct protoent * getprotoent (void);$/;"	p	signature:(void)
getpt	libc.h	/^int getpt (void);$/;"	p	signature:(void)
getpwent	libc.h	/^struct passwd * getpwent (void);$/;"	p	signature:(void)
getpwent_r	libc.h	/^int getpwent_r (struct passwd *result_buf, char *buffer, int buflen, struct passwd **result);$/;"	p	signature:(struct passwd *result_buf, char *buffer, int buflen, struct passwd **result)
getpwnam	libc.h	/^struct passwd * getpwnam (const char *name);$/;"	p	signature:(const char *name)
getpwnam_r	libc.h	/^int getpwnam_r (const char *name, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result);$/;"	p	signature:(const char *name, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
getpwuid	libc.h	/^struct passwd * getpwuid (uid_t uid);$/;"	p	signature:(uid_t uid)
getpwuid_r	libc.h	/^int getpwuid_r (uid_t uid, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result);$/;"	p	signature:(uid_t uid, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
getrlimit	libc.h	/^int getrlimit (int resource, struct rlimit *rlp);$/;"	p	signature:(int resource, struct rlimit *rlp)
getrlimit64	libc.h	/^int getrlimit64 (int resource, struct rlimit64 *rlp);$/;"	p	signature:(int resource, struct rlimit64 *rlp)
getrusage	libc.h	/^int getrusage (int processes, struct rusage *rusage);$/;"	p	signature:(int processes, struct rusage *rusage)
getservbyname	libc.h	/^struct servent * getservbyname (const char *name, const char *proto);$/;"	p	signature:(const char *name, const char *proto)
getservbyport	libc.h	/^struct servent * getservbyport (int port, const char *proto);$/;"	p	signature:(int port, const char *proto)
getservent	libc.h	/^struct servent * getservent (void);$/;"	p	signature:(void)
getsid	libc.h	/^pid_t getsid (pid_t pid);$/;"	p	signature:(pid_t pid)
getsockname	libc.h	/^int getsockname (int socket, struct sockaddr *addr, socklen_t *length-ptr);$/;"	p	signature:(int socket, struct sockaddr *addr, socklen_t *length-ptr)
getsockopt	libc.h	/^int getsockopt (int socket, int level, int optname, void *optval, socklen_t *optlen-ptr);$/;"	p	signature:(int socket, int level, int optname, void *optval, socklen_t *optlen-ptr)
getsubopt	libc.h	/^int getsubopt (char **optionp, const char* const *tokens, char **valuep);$/;"	p	signature:(char **optionp, const char* const *tokens, char **valuep)
gettext	libc.h	/^char * gettext (const char *msgid);$/;"	p	signature:(const char *msgid)
gettimeofday	libc.h	/^int gettimeofday (struct timeval *tp, struct timezone *tzp);$/;"	p	signature:(struct timeval *tp, struct timezone *tzp)
getuid	libc.h	/^uid_t getuid (void);$/;"	p	signature:(void)
getumask	libc.h	/^mode_t getumask (void);$/;"	p	signature:(void)
getutent	libc.h	/^struct utmp * getutent (void);$/;"	p	signature:(void)
getutent_r	libc.h	/^int getutent_r (struct utmp *buffer, struct utmp **result);$/;"	p	signature:(struct utmp *buffer, struct utmp **result)
getutid	libc.h	/^struct utmp * getutid (const struct utmp *id);$/;"	p	signature:(const struct utmp *id)
getutid_r	libc.h	/^int getutid_r (const struct utmp *id, struct utmp *buffer, struct utmp **result);$/;"	p	signature:(const struct utmp *id, struct utmp *buffer, struct utmp **result)
getutline	libc.h	/^struct utmp * getutline (const struct utmp *line);$/;"	p	signature:(const struct utmp *line)
getutline_r	libc.h	/^int getutline_r (const struct utmp *line, struct utmp *buffer, struct utmp **result);$/;"	p	signature:(const struct utmp *line, struct utmp *buffer, struct utmp **result)
getutmp	libc.h	/^int getutmp (const struct utmpx *utmpx, struct utmp *utmp);$/;"	p	signature:(const struct utmpx *utmpx, struct utmp *utmp)
getutmpx	libc.h	/^int getutmpx (const struct utmp *utmp, struct utmpx *utmpx);$/;"	p	signature:(const struct utmp *utmp, struct utmpx *utmpx)
getutxent	libc.h	/^struct utmpx * getutxent (void);$/;"	p	signature:(void)
getutxid	libc.h	/^struct utmpx * getutxid (const struct utmpx *id);$/;"	p	signature:(const struct utmpx *id)
getutxline	libc.h	/^struct utmpx * getutxline (const struct utmpx *line);$/;"	p	signature:(const struct utmpx *line)
getw	libc.h	/^int getw (FILE *stream);$/;"	p	signature:(FILE *stream)
getwc	libc.h	/^wint_t getwc (FILE *stream);$/;"	p	signature:(FILE *stream)
getwc_unlocked	libc.h	/^wint_t getwc_unlocked (FILE *stream);$/;"	p	signature:(FILE *stream)
getwchar	libc.h	/^wint_t getwchar (void);$/;"	p	signature:(void)
getwchar_unlocked	libc.h	/^wint_t getwchar_unlocked (void);$/;"	p	signature:(void)
glob	libc.h	/^int glob (const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob_t *vector-ptr);$/;"	p	signature:(const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob_t *vector-ptr)
glob64	libc.h	/^int glob64 (const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob64_t *vector-ptr);$/;"	p	signature:(const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob64_t *vector-ptr)
globfree	libc.h	/^void globfree (glob_t *pglob);$/;"	p	signature:(glob_t *pglob)
globfree64	libc.h	/^void globfree64 (glob64_t *pglob);$/;"	p	signature:(glob64_t *pglob)
gmtime	libc.h	/^struct tm * gmtime (const time_t *time);$/;"	p	signature:(const time_t *time)
gmtime_r	libc.h	/^struct tm * gmtime_r (const time_t *time, struct tm *resultp);$/;"	p	signature:(const time_t *time, struct tm *resultp)
grantpt	libc.h	/^int grantpt (int filedes);$/;"	p	signature:(int filedes)
gsignal	libc.h	/^int gsignal (int signum);$/;"	p	signature:(int signum)
gtty	libc.h	/^int gtty (int filedes, struct sgttyb *attributes);$/;"	p	signature:(int filedes, struct sgttyb *attributes)
hasmntopt	libc.h	/^char * hasmntopt (const struct mntent *mnt, const char *opt);$/;"	p	signature:(const struct mntent *mnt, const char *opt)
hcreate	libc.h	/^int hcreate (size_t nel);$/;"	p	signature:(size_t nel)
hcreate_r	libc.h	/^int hcreate_r (size_t nel, struct hsearch_data *htab);$/;"	p	signature:(size_t nel, struct hsearch_data *htab)
hdestroy	libc.h	/^void hdestroy (void);$/;"	p	signature:(void)
hdestroy_r	libc.h	/^void hdestroy_r (struct hsearch_data *htab);$/;"	p	signature:(struct hsearch_data *htab)
hsearch	libc.h	/^ENTRY * hsearch (ENTRY item, ACTION action);$/;"	p	signature:(ENTRY item, ACTION action)
hsearch_r	libc.h	/^int hsearch_r (ENTRY item, ACTION action, ENTRY **retval, struct hsearch_data *htab);$/;"	p	signature:(ENTRY item, ACTION action, ENTRY **retval, struct hsearch_data *htab)
htonl	libc.h	/^uint32_t htonl (uint32_t hostlong);$/;"	p	signature:(uint32_t hostlong)
htons	libc.h	/^uint16_t htons (uint16_t hostshort);$/;"	p	signature:(uint16_t hostshort)
hypot	libc.h	/^double hypot (double x, double y);$/;"	p	signature:(double x, double y)
iconv	libc.h	/^size_t iconv (iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);$/;"	p	signature:(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
iconv_close	libc.h	/^int iconv_close (iconv_t cd);$/;"	p	signature:(iconv_t cd)
iconv_open	libc.h	/^iconv_t iconv_open (const char *tocode, const char *fromcode);$/;"	p	signature:(const char *tocode, const char *fromcode)
if_freenameindex	libc.h	/^void if_freenameindex (struct if_nameindex *ptr);$/;"	p	signature:(struct if_nameindex *ptr)
if_indextoname	libc.h	/^char * if_indextoname (unsigned int ifindex, char *ifname);$/;"	p	signature:(unsigned int ifindex, char *ifname)
if_nameindex	libc.h	/^struct if_nameindex * if_nameindex (void);$/;"	p	signature:(void)
if_nametoindex	libc.h	/^unsigned int if_nametoindex (const char *ifname);$/;"	p	signature:(const char *ifname)
ilogb	libc.h	/^int ilogb (double x);$/;"	p	signature:(double x)
imaxdiv	libc.h	/^imaxdiv_t imaxdiv (intmax_t numerator, intmax_t denominator);$/;"	p	signature:(intmax_t numerator, intmax_t denominator)
index	libc.h	/^char * index (const char *string, int c);$/;"	p	signature:(const char *string, int c)
inet_addr	libc.h	/^uint32_t inet_addr (const char *name);$/;"	p	signature:(const char *name)
inet_aton	libc.h	/^int inet_aton (const char *name, struct in_addr *addr);$/;"	p	signature:(const char *name, struct in_addr *addr)
inet_lnaof	libc.h	/^uint32_t inet_lnaof (struct in_addr addr);$/;"	p	signature:(struct in_addr addr)
inet_makeaddr	libc.h	/^struct in_addr inet_makeaddr (uint32_t net, uint32_t local);$/;"	p	signature:(uint32_t net, uint32_t local)
inet_netof	libc.h	/^uint32_t inet_netof (struct in_addr addr);$/;"	p	signature:(struct in_addr addr)
inet_network	libc.h	/^uint32_t inet_network (const char *name);$/;"	p	signature:(const char *name)
inet_ntoa	libc.h	/^char * inet_ntoa (struct in_addr addr);$/;"	p	signature:(struct in_addr addr)
inet_ntop	libc.h	/^const char * inet_ntop (int af, const void *cp, char *buf, size_t len);$/;"	p	signature:(int af, const void *cp, char *buf, size_t len)
inet_pton	libc.h	/^int inet_pton (int af, const char *cp, void *buf);$/;"	p	signature:(int af, const char *cp, void *buf)
initgroups	libc.h	/^int initgroups (const char *user, gid_t group);$/;"	p	signature:(const char *user, gid_t group)
initstate	libc.h	/^void * initstate (unsigned int seed, void *state, size_t size);$/;"	p	signature:(unsigned int seed, void *state, size_t size)
initstate_r	libc.h	/^int initstate_r (unsigned int seed, char *restrict statebuf, size_t statelen, struct random_data *restrict buf);$/;"	p	signature:(unsigned int seed, char *restrict statebuf, size_t statelen, struct random_data *restrict buf)
innetgr	libc.h	/^int innetgr (const char *netgroup, const char *host, const char *user, const char *domain);$/;"	p	signature:(const char *netgroup, const char *host, const char *user, const char *domain)
ioctl	libc.h	/^int ioctl (int filedes, int command, ...);$/;"	p	signature:(int filedes, int command, ...)
isalnum	libc.h	/^int isalnum (int c);$/;"	p	signature:(int c)
isalpha	libc.h	/^int isalpha (int c);$/;"	p	signature:(int c)
isascii	libc.h	/^int isascii (int c);$/;"	p	signature:(int c)
isatty	libc.h	/^int isatty (int filedes);$/;"	p	signature:(int filedes)
isblank	libc.h	/^int isblank (int c);$/;"	p	signature:(int c)
iscntrl	libc.h	/^int iscntrl (int c);$/;"	p	signature:(int c)
isdigit	libc.h	/^int isdigit (int c);$/;"	p	signature:(int c)
isgraph	libc.h	/^int isgraph (int c);$/;"	p	signature:(int c)
isinf	libc.h	/^int isinf (double x);$/;"	p	signature:(double x)
islower	libc.h	/^int islower (int c);$/;"	p	signature:(int c)
isnan	libc.h	/^int isnan (double x);$/;"	p	signature:(double x)
isprint	libc.h	/^int isprint (int c);$/;"	p	signature:(int c)
ispunct	libc.h	/^int ispunct (int c);$/;"	p	signature:(int c)
isspace	libc.h	/^int isspace (int c);$/;"	p	signature:(int c)
isupper	libc.h	/^int isupper (int c);$/;"	p	signature:(int c)
iswalnum	libc.h	/^int iswalnum (wint_t wc);$/;"	p	signature:(wint_t wc)
iswalpha	libc.h	/^int iswalpha (wint_t wc);$/;"	p	signature:(wint_t wc)
iswblank	libc.h	/^int iswblank (wint_t wc);$/;"	p	signature:(wint_t wc)
iswcntrl	libc.h	/^int iswcntrl (wint_t wc);$/;"	p	signature:(wint_t wc)
iswctype	libc.h	/^int iswctype (wint_t wc, wctype_t desc);$/;"	p	signature:(wint_t wc, wctype_t desc)
iswdigit	libc.h	/^int iswdigit (wint_t wc);$/;"	p	signature:(wint_t wc)
iswgraph	libc.h	/^int iswgraph (wint_t wc);$/;"	p	signature:(wint_t wc)
iswlower	libc.h	/^int iswlower (wint_t wc);$/;"	p	signature:(wint_t wc)
iswprint	libc.h	/^int iswprint (wint_t wc);$/;"	p	signature:(wint_t wc)
iswpunct	libc.h	/^int iswpunct (wint_t wc);$/;"	p	signature:(wint_t wc)
iswspace	libc.h	/^int iswspace (wint_t wc);$/;"	p	signature:(wint_t wc)
iswupper	libc.h	/^int iswupper (wint_t wc);$/;"	p	signature:(wint_t wc)
iswxdigit	libc.h	/^int iswxdigit (wint_t wc);$/;"	p	signature:(wint_t wc)
isxdigit	libc.h	/^int isxdigit (int c);$/;"	p	signature:(int c)
j0	libc.h	/^double j0 (double x);$/;"	p	signature:(double x)
j1	libc.h	/^double j1 (double x);$/;"	p	signature:(double x)
jn	libc.h	/^double jn (int n, double x);$/;"	p	signature:(int n, double x)
jrand48	libc.h	/^long int jrand48 (unsigned short int xsubi[3]);$/;"	p	signature:(unsigned short int xsubi[3])
jrand48_r	libc.h	/^int jrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result);$/;"	p	signature:(unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
kill	libc.h	/^int kill (pid_t pid, int signum);$/;"	p	signature:(pid_t pid, int signum)
killpg	libc.h	/^int killpg (int pgid, int signum);$/;"	p	signature:(int pgid, int signum)
l64a	libc.h	/^char * l64a (long int n);$/;"	p	signature:(long int n)
lcong48	libc.h	/^void lcong48 (unsigned short int param[7]);$/;"	p	signature:(unsigned short int param[7])
lcong48_r	libc.h	/^int lcong48_r (unsigned short int param[7], struct drand48_data *buffer);$/;"	p	signature:(unsigned short int param[7], struct drand48_data *buffer)
ldexp	libc.h	/^double ldexp (double value, int exponent);$/;"	p	signature:(double value, int exponent)
ldiv	libc.h	/^ldiv_t ldiv (long int numerator, long int denominator);$/;"	p	signature:(long int numerator, long int denominator)
lfind	libc.h	/^void * lfind (const void *key, void *base, size_t *nmemb, size_t size, comparison_fn_t compar);$/;"	p	signature:(const void *key, void *base, size_t *nmemb, size_t size, comparison_fn_t compar)
lgamma	libc.h	/^double lgamma (double x);$/;"	p	signature:(double x)
lgamma_r	libc.h	/^double lgamma_r (double x, int *signp);$/;"	p	signature:(double x, int *signp)
link	libc.h	/^int link (const char *oldname, const char *newname);$/;"	p	signature:(const char *oldname, const char *newname)
lio_listio	libc.h	/^int lio_listio (int mode, struct aiocb *const list[], int nent, struct sigevent *sig);$/;"	p	signature:(int mode, struct aiocb *const list[], int nent, struct sigevent *sig)
lio_listio64	libc.h	/^int lio_listio64 (int mode, struct aiocb *const list, int nent, struct sigevent *sig);$/;"	p	signature:(int mode, struct aiocb *const list, int nent, struct sigevent *sig)
listen	libc.h	/^int listen (int socket, int n);$/;"	p	signature:(int socket, int n)
lldiv	libc.h	/^lldiv_t lldiv (long long int numerator, long long int denominator);$/;"	p	signature:(long long int numerator, long long int denominator)
llrint	libc.h	/^long long int llrint (double x);$/;"	p	signature:(double x)
llround	libc.h	/^long long int llround (double x);$/;"	p	signature:(double x)
localeconv	libc.h	/^struct lconv * localeconv (void);$/;"	p	signature:(void)
localtime	libc.h	/^struct tm * localtime (const time_t *time);$/;"	p	signature:(const time_t *time)
localtime_r	libc.h	/^struct tm * localtime_r (const time_t *time, struct tm *resultp);$/;"	p	signature:(const time_t *time, struct tm *resultp)
log	libc.h	/^double log (double x);$/;"	p	signature:(double x)
log10	libc.h	/^double log10 (double x);$/;"	p	signature:(double x)
log1p	libc.h	/^double log1p (double x);$/;"	p	signature:(double x)
log2	libc.h	/^double log2 (double x);$/;"	p	signature:(double x)
logb	libc.h	/^double logb (double x);$/;"	p	signature:(double x)
login	libc.h	/^void login (const struct utmp *entry);$/;"	p	signature:(const struct utmp *entry)
login_tty	libc.h	/^int login_tty (int filedes);$/;"	p	signature:(int filedes)
logout	libc.h	/^int logout (const char *ut_line);$/;"	p	signature:(const char *ut_line)
logwtmp	libc.h	/^void logwtmp (const char *ut_line, const char *ut_name, const char *ut_host);$/;"	p	signature:(const char *ut_line, const char *ut_name, const char *ut_host)
longjmp	libc.h	/^void longjmp (jmp_buf state, int value);$/;"	p	signature:(jmp_buf state, int value)
lrand48	libc.h	/^long int lrand48 (void);$/;"	p	signature:(void)
lrand48_r	libc.h	/^int lrand48_r (struct drand48_data *buffer, double *result);$/;"	p	signature:(struct drand48_data *buffer, double *result)
lrint	libc.h	/^long int lrint (double x);$/;"	p	signature:(double x)
lround	libc.h	/^long int lround (double x);$/;"	p	signature:(double x)
lsearch	libc.h	/^void * lsearch (const void *key, void *base, size_t *nmemb, size_t size, comparison_fn_t compar);$/;"	p	signature:(const void *key, void *base, size_t *nmemb, size_t size, comparison_fn_t compar)
lseek	libc.h	/^off_t lseek (int filedes, off_t offset, int whence);$/;"	p	signature:(int filedes, off_t offset, int whence)
lseek64	libc.h	/^off64_t lseek64 (int filedes, off64_t offset, int whence);$/;"	p	signature:(int filedes, off64_t offset, int whence)
lstat	libc.h	/^int lstat (const char *filename, struct stat *buf);$/;"	p	signature:(const char *filename, struct stat *buf)
lstat64	libc.h	/^int lstat64 (const char *filename, struct stat64 *buf);$/;"	p	signature:(const char *filename, struct stat64 *buf)
lutimes	libc.h	/^int lutimes (const char *filename, struct timeval tvp[2]);$/;"	p	signature:(const char *filename, struct timeval tvp[2])
madvise	libc.h	/^int madvise (void *addr, size_t length, int advice);$/;"	p	signature:(void *addr, size_t length, int advice)
makecontext	libc.h	/^void makecontext (ucontext_t *ucp, void (*func) (void), int argc, ...);$/;"	p	signature:(ucontext_t *ucp, void (*func) (void), int argc, ...)
mallinfo	libc.h	/^struct mallinfo mallinfo (void);$/;"	p	signature:(void)
malloc	libc.h	/^void * malloc (size_t size);$/;"	p	signature:(size_t size)
mallopt	libc.h	/^int mallopt (int param, int value);$/;"	p	signature:(int param, int value)
mblen	libc.h	/^int mblen (const char *string, size_t size);$/;"	p	signature:(const char *string, size_t size)
mbrlen	libc.h	/^size_t mbrlen (const char *restrict s, size_t n, mbstate_t *ps);$/;"	p	signature:(const char *restrict s, size_t n, mbstate_t *ps)
mbrtowc	libc.h	/^size_t mbrtowc (wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps);$/;"	p	signature:(wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps)
mbsinit	libc.h	/^int mbsinit (const mbstate_t *ps);$/;"	p	signature:(const mbstate_t *ps)
mbsnrtowcs	libc.h	/^size_t mbsnrtowcs (wchar_t *restrict dst, const char **restrict src, size_t nmc, size_t len, mbstate_t *restrict ps);$/;"	p	signature:(wchar_t *restrict dst, const char **restrict src, size_t nmc, size_t len, mbstate_t *restrict ps)
mbsrtowcs	libc.h	/^size_t mbsrtowcs (wchar_t *restrict dst, const char **restrict src, size_t len, mbstate_t *restrict ps);$/;"	p	signature:(wchar_t *restrict dst, const char **restrict src, size_t len, mbstate_t *restrict ps)
mbstowcs	libc.h	/^size_t mbstowcs (wchar_t *wstring, const char *string, size_t size);$/;"	p	signature:(wchar_t *wstring, const char *string, size_t size)
mbtowc	libc.h	/^int mbtowc (wchar_t *restrict result, const char *restrict string, size_t size);$/;"	p	signature:(wchar_t *restrict result, const char *restrict string, size_t size)
mcheck	libc.h	/^int mcheck (void (*abortfn) (enum mcheck_status status));$/;"	p	signature:(void (*abortfn) (enum mcheck_status status))
memalign	libc.h	/^void * memalign (size_t boundary, size_t size);$/;"	p	signature:(size_t boundary, size_t size)
memccpy	libc.h	/^void * memccpy (void *restrict to, const void *restrict from, int c, size_t size);$/;"	p	signature:(void *restrict to, const void *restrict from, int c, size_t size)
memchr	libc.h	/^void * memchr (const void *block, int c, size_t size);$/;"	p	signature:(const void *block, int c, size_t size)
memcmp	libc.h	/^int memcmp (const void *a1, const void *a2, size_t size);$/;"	p	signature:(const void *a1, const void *a2, size_t size)
memcpy	libc.h	/^void * memcpy (void *restrict to, const void *restrict from, size_t size);$/;"	p	signature:(void *restrict to, const void *restrict from, size_t size)
memfrob	libc.h	/^void * memfrob (void *mem, size_t length);$/;"	p	signature:(void *mem, size_t length)
memmem	libc.h	/^void * memmem (const void *haystack, size_t haystack_len, const void *needle, size_t needle_len);$/;"	p	signature:(const void *haystack, size_t haystack_len, const void *needle, size_t needle_len)
memmove	libc.h	/^void * memmove (void *to, const void *from, size_t size);$/;"	p	signature:(void *to, const void *from, size_t size)
mempcpy	libc.h	/^void * mempcpy (void *restrict to, const void *restrict from, size_t size);$/;"	p	signature:(void *restrict to, const void *restrict from, size_t size)
memrchr	libc.h	/^void * memrchr (const void *block, int c, size_t size);$/;"	p	signature:(const void *block, int c, size_t size)
memset	libc.h	/^void * memset (void *block, int c, size_t size);$/;"	p	signature:(void *block, int c, size_t size)
mkdir	libc.h	/^int mkdir (const char *filename, mode_t mode);$/;"	p	signature:(const char *filename, mode_t mode)
mkdtemp	libc.h	/^char * mkdtemp (char *template);$/;"	p	signature:(char *template)
mkfifo	libc.h	/^int mkfifo (const char *filename, mode_t mode);$/;"	p	signature:(const char *filename, mode_t mode)
mknod	libc.h	/^int mknod (const char *filename, int mode, int dev);$/;"	p	signature:(const char *filename, int mode, int dev)
mkstemp	libc.h	/^int mkstemp (char *template);$/;"	p	signature:(char *template)
mktemp	libc.h	/^char * mktemp (char *template);$/;"	p	signature:(char *template)
mktime	libc.h	/^time_t mktime (struct tm *brokentime);$/;"	p	signature:(struct tm *brokentime)
mlock	libc.h	/^int mlock (const void *addr, size_t len);$/;"	p	signature:(const void *addr, size_t len)
mlockall	libc.h	/^int mlockall (int flags);$/;"	p	signature:(int flags)
mmap	libc.h	/^void * mmap (void *address, size_t length,int protect, int flags, int filedes, off_t offset);$/;"	p	signature:(void *address, size_t length,int protect, int flags, int filedes, off_t offset)
mmap64	libc.h	/^void * mmap64 (void *address, size_t length,int protect, int flags, int filedes, off64_t offset);$/;"	p	signature:(void *address, size_t length,int protect, int flags, int filedes, off64_t offset)
modf	libc.h	/^double modf (double value, double *integer-part);$/;"	p	signature:(double value, double *integer-part)
mount	libc.h	/^int mount (const char *special_file, const char *dir, const char *fstype, unsigned long int options, const void *data);$/;"	p	signature:(const char *special_file, const char *dir, const char *fstype, unsigned long int options, const void *data)
mprobe	libc.h	/^enum mcheck_status mprobe (void *pointer);$/;"	p	signature:(void *pointer)
mrand48	libc.h	/^long int mrand48 (void);$/;"	p	signature:(void)
mrand48_r	libc.h	/^int mrand48_r (struct drand48_data *buffer, double *result);$/;"	p	signature:(struct drand48_data *buffer, double *result)
mremap	libc.h	/^void * mremap (void *address, size_t length, size_t new_length, int flag);$/;"	p	signature:(void *address, size_t length, size_t new_length, int flag)
msync	libc.h	/^int msync (void *address, size_t length, int flags);$/;"	p	signature:(void *address, size_t length, int flags)
mtrace	libc.h	/^void mtrace (void);$/;"	p	signature:(void)
munlock	libc.h	/^int munlock (const void *addr, size_t len);$/;"	p	signature:(const void *addr, size_t len)
munlockall	libc.h	/^int munlockall (void);$/;"	p	signature:(void)
munmap	libc.h	/^int munmap (void *addr, size_t length);$/;"	p	signature:(void *addr, size_t length)
muntrace	libc.h	/^void muntrace (void);$/;"	p	signature:(void)
nan	libc.h	/^double nan (const char *tagp);$/;"	p	signature:(const char *tagp)
nanosleep	libc.h	/^int nanosleep (const struct timespec *requested_time, struct timespec *remaining);$/;"	p	signature:(const struct timespec *requested_time, struct timespec *remaining)
nearbyint	libc.h	/^double nearbyint (double x);$/;"	p	signature:(double x)
nextafter	libc.h	/^double nextafter (double x, double y);$/;"	p	signature:(double x, double y)
nexttoward	libc.h	/^double nexttoward (double x, long double y);$/;"	p	signature:(double x, long double y)
nftw	libc.h	/^int nftw (const char *filename, __nftw_func_t func, int descriptors, int flag);$/;"	p	signature:(const char *filename, __nftw_func_t func, int descriptors, int flag)
nftw64	libc.h	/^int nftw64 (const char *filename, __nftw64_func_t func, int descriptors, int flag);$/;"	p	signature:(const char *filename, __nftw64_func_t func, int descriptors, int flag)
ngettext	libc.h	/^char * ngettext (const char *msgid1, const char *msgid2, unsigned long int n);$/;"	p	signature:(const char *msgid1, const char *msgid2, unsigned long int n)
nice	libc.h	/^int nice (int increment);$/;"	p	signature:(int increment)
nl_langinfo	libc.h	/^char * nl_langinfo (nl_item item);$/;"	p	signature:(nl_item item)
nrand48	libc.h	/^long int nrand48 (unsigned short int xsubi[3]);$/;"	p	signature:(unsigned short int xsubi[3])
nrand48_r	libc.h	/^int nrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result);$/;"	p	signature:(unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
ntohl	libc.h	/^uint32_t ntohl (uint32_t netlong);$/;"	p	signature:(uint32_t netlong)
ntohs	libc.h	/^uint16_t ntohs (uint16_t netshort);$/;"	p	signature:(uint16_t netshort)
ntp_adjtime	libc.h	/^int ntp_adjtime (struct timex *tptr);$/;"	p	signature:(struct timex *tptr)
ntp_gettime	libc.h	/^int ntp_gettime (struct ntptimeval *tptr);$/;"	p	signature:(struct ntptimeval *tptr)
obstack_1grow	libc.h	/^void obstack_1grow (struct obstack *obstack-ptr, char c);$/;"	p	signature:(struct obstack *obstack-ptr, char c)
obstack_1grow_fast	libc.h	/^void obstack_1grow_fast (struct obstack *obstack-ptr, char c);$/;"	p	signature:(struct obstack *obstack-ptr, char c)
obstack_alloc	libc.h	/^void * obstack_alloc (struct obstack *obstack-ptr, int size);$/;"	p	signature:(struct obstack *obstack-ptr, int size)
obstack_base	libc.h	/^void * obstack_base (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_blank	libc.h	/^void obstack_blank (struct obstack *obstack-ptr, int size);$/;"	p	signature:(struct obstack *obstack-ptr, int size)
obstack_blank_fast	libc.h	/^void obstack_blank_fast (struct obstack *obstack-ptr, int size);$/;"	p	signature:(struct obstack *obstack-ptr, int size)
obstack_copy	libc.h	/^void * obstack_copy (struct obstack *obstack-ptr, void *address, int size);$/;"	p	signature:(struct obstack *obstack-ptr, void *address, int size)
obstack_copy0	libc.h	/^void * obstack_copy0 (struct obstack *obstack-ptr, void *address, int size);$/;"	p	signature:(struct obstack *obstack-ptr, void *address, int size)
obstack_finish	libc.h	/^void * obstack_finish (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_free	libc.h	/^void obstack_free (struct obstack *obstack-ptr, void *object);$/;"	p	signature:(struct obstack *obstack-ptr, void *object)
obstack_grow	libc.h	/^void obstack_grow (struct obstack *obstack-ptr, void *data, int size);$/;"	p	signature:(struct obstack *obstack-ptr, void *data, int size)
obstack_grow0	libc.h	/^void obstack_grow0 (struct obstack *obstack-ptr, void *data, int size);$/;"	p	signature:(struct obstack *obstack-ptr, void *data, int size)
obstack_init	libc.h	/^int obstack_init (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_int_grow	libc.h	/^void obstack_int_grow (struct obstack *obstack-ptr, int data);$/;"	p	signature:(struct obstack *obstack-ptr, int data)
obstack_int_grow_fast	libc.h	/^void obstack_int_grow_fast (struct obstack *obstack-ptr, int data);$/;"	p	signature:(struct obstack *obstack-ptr, int data)
obstack_next_free	libc.h	/^void * obstack_next_free (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_object_size	libc.h	/^int obstack_object_size (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_printf	libc.h	/^int obstack_printf (struct obstack *obstack, const char *format, ...);$/;"	p	signature:(struct obstack *obstack, const char *format, ...)
obstack_ptr_grow	libc.h	/^void obstack_ptr_grow (struct obstack *obstack-ptr, void *data);$/;"	p	signature:(struct obstack *obstack-ptr, void *data)
obstack_ptr_grow_fast	libc.h	/^void obstack_ptr_grow_fast (struct obstack *obstack-ptr, void *data);$/;"	p	signature:(struct obstack *obstack-ptr, void *data)
obstack_room	libc.h	/^int obstack_room (struct obstack *obstack-ptr);$/;"	p	signature:(struct obstack *obstack-ptr)
obstack_vprintf	libc.h	/^int obstack_vprintf (struct obstack *obstack, const char *format, va_list ap);$/;"	p	signature:(struct obstack *obstack, const char *format, va_list ap)
on_exit	libc.h	/^int on_exit (void (*function)(int status, void *arg), void *arg);$/;"	p	signature:(void (*function)(int status, void *arg), void *arg)
open	libc.h	/^int open (const char *filename, int flags[, mode_t mode]);$/;"	p	signature:(const char *filename, int flags[, mode_t mode])
open64	libc.h	/^int open64 (const char *filename, int flags[, mode_t mode]);$/;"	p	signature:(const char *filename, int flags[, mode_t mode])
open_memstream	libc.h	/^FILE * open_memstream (char **ptr, size_t *sizeloc);$/;"	p	signature:(char **ptr, size_t *sizeloc)
open_obstack_stream	libc.h	/^FILE * open_obstack_stream (struct obstack *obstack);$/;"	p	signature:(struct obstack *obstack)
opendir	libc.h	/^DIR * opendir (const char *dirname);$/;"	p	signature:(const char *dirname)
openlog	libc.h	/^void openlog (const char *ident, int option, int facility);$/;"	p	signature:(const char *ident, int option, int facility)
openpty	libc.h	/^int openpty (int *amaster, int *aslave, char *name, const struct termios *termp, const struct winsize *winp);$/;"	p	signature:(int *amaster, int *aslave, char *name, const struct termios *termp, const struct winsize *winp)
parse_printf_format	libc.h	/^size_t parse_printf_format (const char *format, size_t n, int *argtypes);$/;"	p	signature:(const char *format, size_t n, int *argtypes)
pathconf	libc.h	/^long int pathconf (const char *filename, int parameter);$/;"	p	signature:(const char *filename, int parameter)
pause	libc.h	/^int pause ();$/;"	p	signature:()
pclose	libc.h	/^int pclose (FILE *stream);$/;"	p	signature:(FILE *stream)
perror	libc.h	/^void perror (const char *message);$/;"	p	signature:(const char *message)
pipe	libc.h	/^int pipe (int filedes[2]);$/;"	p	signature:(int filedes[2])
popen	libc.h	/^FILE * popen (const char *command, const char *mode);$/;"	p	signature:(const char *command, const char *mode)
posix_memalign	libc.h	/^int posix_memalign (void **memptr, size_t alignment, size_t size);$/;"	p	signature:(void **memptr, size_t alignment, size_t size)
pow	libc.h	/^double pow (double base, double power);$/;"	p	signature:(double base, double power)
pread	libc.h	/^ssize_t pread (int filedes, void *buffer, size_t size, off_t offset);$/;"	p	signature:(int filedes, void *buffer, size_t size, off_t offset)
pread64	libc.h	/^ssize_t pread64 (int filedes, void *buffer, size_t size, off64_t offset);$/;"	p	signature:(int filedes, void *buffer, size_t size, off64_t offset)
printf	libc.h	/^int printf (const char *format, ...);$/;"	p	signature:(const char *format, ...)
printf_size	libc.h	/^int printf_size (FILE *fp, const struct printf_info *info, const void *const *args);$/;"	p	signature:(FILE *fp, const struct printf_info *info, const void *const *args)
printf_size_info	libc.h	/^int printf_size_info (const struct printf_info *info, size_t n, int *argtypes);$/;"	p	signature:(const struct printf_info *info, size_t n, int *argtypes)
psignal	libc.h	/^void psignal (int signum, const char *message);$/;"	p	signature:(int signum, const char *message)
ptsname	libc.h	/^char * ptsname (int filedes);$/;"	p	signature:(int filedes)
ptsname_r	libc.h	/^int ptsname_r (int filedes, char *buf, size_t len);$/;"	p	signature:(int filedes, char *buf, size_t len)
putc	libc.h	/^int putc (int c, FILE *stream);$/;"	p	signature:(int c, FILE *stream)
putc_unlocked	libc.h	/^int putc_unlocked (int c, FILE *stream);$/;"	p	signature:(int c, FILE *stream)
putchar	libc.h	/^int putchar (int c);$/;"	p	signature:(int c)
putchar_unlocked	libc.h	/^int putchar_unlocked (int c);$/;"	p	signature:(int c)
putenv	libc.h	/^int putenv (char *string);$/;"	p	signature:(char *string)
putpwent	libc.h	/^int putpwent (const struct passwd *p, FILE *stream);$/;"	p	signature:(const struct passwd *p, FILE *stream)
puts	libc.h	/^int puts (const char *s);$/;"	p	signature:(const char *s)
pututline	libc.h	/^struct utmp * pututline (const struct utmp *utmp);$/;"	p	signature:(const struct utmp *utmp)
pututxline	libc.h	/^struct utmpx * pututxline (const struct utmpx *utmp);$/;"	p	signature:(const struct utmpx *utmp)
putw	libc.h	/^int putw (int w, FILE *stream);$/;"	p	signature:(int w, FILE *stream)
putwc	libc.h	/^wint_t putwc (wchar_t wc, FILE *stream);$/;"	p	signature:(wchar_t wc, FILE *stream)
putwc_unlocked	libc.h	/^wint_t putwc_unlocked (wchar_t wc, FILE *stream);$/;"	p	signature:(wchar_t wc, FILE *stream)
putwchar	libc.h	/^wint_t putwchar (wchar_t wc);$/;"	p	signature:(wchar_t wc)
putwchar_unlocked	libc.h	/^wint_t putwchar_unlocked (wchar_t wc);$/;"	p	signature:(wchar_t wc)
pwrite	libc.h	/^ssize_t pwrite (int filedes, const void *buffer, size_t size, off_t offset);$/;"	p	signature:(int filedes, const void *buffer, size_t size, off_t offset)
pwrite64	libc.h	/^ssize_t pwrite64 (int filedes, const void *buffer, size_t size, off64_t offset);$/;"	p	signature:(int filedes, const void *buffer, size_t size, off64_t offset)
qecvt	libc.h	/^char * qecvt (long double value, int ndigit, int *decpt, int *neg);$/;"	p	signature:(long double value, int ndigit, int *decpt, int *neg)
qecvt_r	libc.h	/^int qecvt_r (long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len);$/;"	p	signature:(long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
qfcvt	libc.h	/^char * qfcvt (long double value, int ndigit, int *decpt, int *neg);$/;"	p	signature:(long double value, int ndigit, int *decpt, int *neg)
qfcvt_r	libc.h	/^int qfcvt_r (long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len);$/;"	p	signature:(long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
qgcvt	libc.h	/^char * qgcvt (long double value, int ndigit, char *buf);$/;"	p	signature:(long double value, int ndigit, char *buf)
qsort	libc.h	/^void qsort (void *array, size_t count, size_t size, comparison_fn_t compare);$/;"	p	signature:(void *array, size_t count, size_t size, comparison_fn_t compare)
raise	libc.h	/^int raise (int signum);$/;"	p	signature:(int signum)
rand	libc.h	/^int rand (void);$/;"	p	signature:(void)
rand_r	libc.h	/^int rand_r (unsigned int *seed);$/;"	p	signature:(unsigned int *seed)
random	libc.h	/^long int random (void);$/;"	p	signature:(void)
random_r	libc.h	/^int random_r (struct random_data *restrict buf, int32_t *restrict result);$/;"	p	signature:(struct random_data *restrict buf, int32_t *restrict result)
rawmemchr	libc.h	/^void * rawmemchr (const void *block, int c);$/;"	p	signature:(const void *block, int c)
read	libc.h	/^ssize_t read (int filedes, void *buffer, size_t size);$/;"	p	signature:(int filedes, void *buffer, size_t size)
readdir	libc.h	/^struct dirent * readdir (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
readdir64	libc.h	/^struct dirent64 * readdir64 (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
readdir64_r	libc.h	/^int readdir64_r (DIR *dirstream, struct dirent64 *entry, struct dirent64 **result);$/;"	p	signature:(DIR *dirstream, struct dirent64 *entry, struct dirent64 **result)
readdir_r	libc.h	/^int readdir_r (DIR *dirstream, struct dirent *entry, struct dirent **result);$/;"	p	signature:(DIR *dirstream, struct dirent *entry, struct dirent **result)
readlink	libc.h	/^int readlink (const char *filename, char *buffer, size_t size);$/;"	p	signature:(const char *filename, char *buffer, size_t size)
readv	libc.h	/^ssize_t readv (int filedes, const struct iovec *vector, int count);$/;"	p	signature:(int filedes, const struct iovec *vector, int count)
realloc	libc.h	/^void * realloc (void *ptr, size_t newsize);$/;"	p	signature:(void *ptr, size_t newsize)
realpath	libc.h	/^char * realpath (const char *restrict name, char *restrict resolved);$/;"	p	signature:(const char *restrict name, char *restrict resolved)
recv	libc.h	/^int recv (int socket, void *buffer, size_t size, int flags);$/;"	p	signature:(int socket, void *buffer, size_t size, int flags)
recvfrom	libc.h	/^int recvfrom (int socket, void *buffer, size_t size, int flags, struct sockaddr *addr, socklen_t *length-ptr);$/;"	p	signature:(int socket, void *buffer, size_t size, int flags, struct sockaddr *addr, socklen_t *length-ptr)
regcomp	libc.h	/^int regcomp (regex_t *restrict compiled, const char *restrict pattern, int cflags);$/;"	p	signature:(regex_t *restrict compiled, const char *restrict pattern, int cflags)
regerror	libc.h	/^size_t regerror (int errcode, const regex_t *restrict compiled, char *restrict buffer, size_t length);$/;"	p	signature:(int errcode, const regex_t *restrict compiled, char *restrict buffer, size_t length)
regexec	libc.h	/^int regexec (const regex_t *restrict compiled, const char *restrict string, size_t nmatch, regmatch_t matchptr[restrict], int eflags);$/;"	p	signature:(const regex_t *restrict compiled, const char *restrict string, size_t nmatch, regmatch_t matchptr[restrict], int eflags)
regfree	libc.h	/^void regfree (regex_t *compiled);$/;"	p	signature:(regex_t *compiled)
register_printf_function	libc.h	/^int register_printf_function (int spec, printf_function handler-function, printf_arginfo_function arginfo-function);$/;"	p	signature:(int spec, printf_function handler-function, printf_arginfo_function arginfo-function)
remainder	libc.h	/^double remainder (double numerator, double denominator);$/;"	p	signature:(double numerator, double denominator)
remove	libc.h	/^int remove (const char *filename);$/;"	p	signature:(const char *filename)
rename	libc.h	/^int rename (const char *oldname, const char *newname);$/;"	p	signature:(const char *oldname, const char *newname)
rewind	libc.h	/^void rewind (FILE *stream);$/;"	p	signature:(FILE *stream)
rewinddir	libc.h	/^void rewinddir (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
rindex	libc.h	/^char * rindex (const char *string, int c);$/;"	p	signature:(const char *string, int c)
rint	libc.h	/^double rint (double x);$/;"	p	signature:(double x)
rmdir	libc.h	/^int rmdir (const char *filename);$/;"	p	signature:(const char *filename)
round	libc.h	/^double round (double x);$/;"	p	signature:(double x)
rpmatch	libc.h	/^int rpmatch (const char *response);$/;"	p	signature:(const char *response)
sbrk	libc.h	/^void *sbrk (ptrdiff_t delta);$/;"	p	signature:(ptrdiff_t delta)
scalb	libc.h	/^double scalb (double value, int exponent);$/;"	p	signature:(double value, int exponent)
scalbln	libc.h	/^long long int scalbln (double x, long int n);$/;"	p	signature:(double x, long int n)
scalbn	libc.h	/^long long int scalbn (double x, int n);$/;"	p	signature:(double x, int n)
scandir	libc.h	/^int scandir (const char *dir, struct dirent ***namelist, int (*selector) (const struct dirent *), int (*cmp) (const void *, const void *));$/;"	p	signature:(const char *dir, struct dirent ***namelist, int (*selector) (const struct dirent *), int (*cmp) (const void *, const void *))
scandir64	libc.h	/^int scandir64 (const char *dir, struct dirent64 ***namelist, int (*selector) (const struct dirent64 *), int (*cmp) (const void *, const void *));$/;"	p	signature:(const char *dir, struct dirent64 ***namelist, int (*selector) (const struct dirent64 *), int (*cmp) (const void *, const void *))
scanf	libc.h	/^int scanf (const char *format, ...);$/;"	p	signature:(const char *format, ...)
sched_get_priority_max	libc.h	/^int sched_get_priority_max (int *policy);;$/;"	p	signature:(int *policy)
sched_get_priority_min	libc.h	/^int sched_get_priority_min (int *policy);;$/;"	p	signature:(int *policy)
sched_getaffinity	libc.h	/^int sched_getaffinity (pid_t pid, size_t cpusetsize, cpu_set_t *cpuset);$/;"	p	signature:(pid_t pid, size_t cpusetsize, cpu_set_t *cpuset)
sched_getparam	libc.h	/^int sched_getparam (pid_t pid, const struct sched_param *param);$/;"	p	signature:(pid_t pid, const struct sched_param *param)
sched_getscheduler	libc.h	/^int sched_getscheduler (pid_t pid);$/;"	p	signature:(pid_t pid)
sched_rr_get_interval	libc.h	/^int sched_rr_get_interval (pid_t pid, struct timespec *interval);$/;"	p	signature:(pid_t pid, struct timespec *interval)
sched_setaffinity	libc.h	/^int sched_setaffinity (pid_t pid, size_t cpusetsize, const cpu_set_t *cpuset);$/;"	p	signature:(pid_t pid, size_t cpusetsize, const cpu_set_t *cpuset)
sched_setparam	libc.h	/^int sched_setparam (pid_t pid, const struct sched_param *param);$/;"	p	signature:(pid_t pid, const struct sched_param *param)
sched_setscheduler	libc.h	/^int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param);$/;"	p	signature:(pid_t pid, int policy, const struct sched_param *param)
sched_yield	libc.h	/^int sched_yield (void);$/;"	p	signature:(void)
seed48	libc.h	/^unsigned short int * seed48 (unsigned short int seed16v[3]);$/;"	p	signature:(unsigned short int seed16v[3])
seed48_r	libc.h	/^int seed48_r (unsigned short int seed16v[3], struct drand48_data *buffer);$/;"	p	signature:(unsigned short int seed16v[3], struct drand48_data *buffer)
seekdir	libc.h	/^void seekdir (DIR *dirstream, long int pos);$/;"	p	signature:(DIR *dirstream, long int pos)
select	libc.h	/^int select (int nfds, fd_set *read-fds, fd_set *write-fds, fd_set *except-fds, struct timeval *timeout);$/;"	p	signature:(int nfds, fd_set *read-fds, fd_set *write-fds, fd_set *except-fds, struct timeval *timeout)
send	libc.h	/^int send (int socket, void *buffer, size_t size, int flags);$/;"	p	signature:(int socket, void *buffer, size_t size, int flags)
sendto	libc.h	/^int sendto (int socket, void *buffer. size_t size, int flags, struct sockaddr *addr, socklen_t length);$/;"	p	signature:(int socket, void *buffer. size_t size, int flags, struct sockaddr *addr, socklen_t length)
setbuf	libc.h	/^void setbuf (FILE *stream, char *buf);$/;"	p	signature:(FILE *stream, char *buf)
setbuffer	libc.h	/^void setbuffer (FILE *stream, char *buf, size_t size);$/;"	p	signature:(FILE *stream, char *buf, size_t size)
setcontext	libc.h	/^int setcontext (const ucontext_t *ucp);$/;"	p	signature:(const ucontext_t *ucp)
setdomainname	libc.h	/^int setdomainname (const char *name, size_t length);$/;"	p	signature:(const char *name, size_t length)
setegid	libc.h	/^int setegid (gid_t newgid);$/;"	p	signature:(gid_t newgid)
setenv	libc.h	/^int setenv (const char *name, const char *value, int replace);$/;"	p	signature:(const char *name, const char *value, int replace)
seteuid	libc.h	/^int seteuid (uid_t neweuid);$/;"	p	signature:(uid_t neweuid)
setfsent	libc.h	/^int setfsent (void);$/;"	p	signature:(void)
setgid	libc.h	/^int setgid (gid_t newgid);$/;"	p	signature:(gid_t newgid)
setgrent	libc.h	/^void setgrent (void);$/;"	p	signature:(void)
setgroups	libc.h	/^int setgroups (size_t count, gid_t *groups);$/;"	p	signature:(size_t count, gid_t *groups)
sethostent	libc.h	/^void sethostent (int stayopen);$/;"	p	signature:(int stayopen)
sethostid	libc.h	/^int sethostid (long int id);$/;"	p	signature:(long int id)
sethostname	libc.h	/^int sethostname (const char *name, size_t length);$/;"	p	signature:(const char *name, size_t length)
setitimer	libc.h	/^int setitimer (int which, struct itimerval *new, struct itimerval *old);$/;"	p	signature:(int which, struct itimerval *new, struct itimerval *old)
setkey	libc.h	/^void setkey (const char *key);$/;"	p	signature:(const char *key)
setkey_r	libc.h	/^void setkey_r (const char *key, struct crypt_data * data);$/;"	p	signature:(const char *key, struct crypt_data * data)
setlinebuf	libc.h	/^void setlinebuf (FILE *stream);$/;"	p	signature:(FILE *stream)
setlocale	libc.h	/^char * setlocale (int category, const char *locale);$/;"	p	signature:(int category, const char *locale)
setlogmask	libc.h	/^int setlogmask (int mask);$/;"	p	signature:(int mask)
setmntent	libc.h	/^FILE * setmntent (const char *file, const char *mode);$/;"	p	signature:(const char *file, const char *mode)
setnetent	libc.h	/^void setnetent (int stayopen);$/;"	p	signature:(int stayopen)
setnetgrent	libc.h	/^int setnetgrent (const char *netgroup);$/;"	p	signature:(const char *netgroup)
setpgid	libc.h	/^int setpgid (pid_t pid, pid_t pgid);$/;"	p	signature:(pid_t pid, pid_t pgid)
setpgrp	libc.h	/^int setpgrp (pid_t pid, pid_t pgid);$/;"	p	signature:(pid_t pid, pid_t pgid)
setpriority	libc.h	/^int setpriority (int class, int id, int niceval);$/;"	p	signature:(int class, int id, int niceval)
setprotoent	libc.h	/^void setprotoent (int stayopen);$/;"	p	signature:(int stayopen)
setpwent	libc.h	/^void setpwent (void);$/;"	p	signature:(void)
setregid	libc.h	/^int setregid (gid_t rgid, gid_t egid);$/;"	p	signature:(gid_t rgid, gid_t egid)
setreuid	libc.h	/^int setreuid (uid_t ruid, uid_t euid);$/;"	p	signature:(uid_t ruid, uid_t euid)
setrlimit	libc.h	/^int setrlimit (int resource, const struct rlimit *rlp);$/;"	p	signature:(int resource, const struct rlimit *rlp)
setrlimit64	libc.h	/^int setrlimit64 (int resource, const struct rlimit64 *rlp);$/;"	p	signature:(int resource, const struct rlimit64 *rlp)
setservent	libc.h	/^void setservent (int stayopen);$/;"	p	signature:(int stayopen)
setsid	libc.h	/^pid_t setsid (void);$/;"	p	signature:(void)
setsockopt	libc.h	/^int setsockopt (int socket, int level, int optname, void *optval, socklen_t optlen);$/;"	p	signature:(int socket, int level, int optname, void *optval, socklen_t optlen)
setstate	libc.h	/^void * setstate (void *state);$/;"	p	signature:(void *state)
setstate_r	libc.h	/^int setstate_r (char *restrict statebuf, struct random_data *restrict buf);$/;"	p	signature:(char *restrict statebuf, struct random_data *restrict buf)
settimeofday	libc.h	/^int settimeofday (const struct timeval *tp, const struct timezone *tzp);$/;"	p	signature:(const struct timeval *tp, const struct timezone *tzp)
setuid	libc.h	/^int setuid (uid_t newuid);$/;"	p	signature:(uid_t newuid)
setutent	libc.h	/^void setutent (void);$/;"	p	signature:(void)
setutxent	libc.h	/^void setutxent (void);$/;"	p	signature:(void)
setvbuf	libc.h	/^int setvbuf (FILE *stream, char *buf, int mode, size_t size);$/;"	p	signature:(FILE *stream, char *buf, int mode, size_t size)
shutdown	libc.h	/^int shutdown (int socket, int how);$/;"	p	signature:(int socket, int how)
sigaction	libc.h	/^int sigaction (int signum, const struct sigaction *restrict action, struct sigaction *restrict old-action);$/;"	p	signature:(int signum, const struct sigaction *restrict action, struct sigaction *restrict old-action)
sigaddset	libc.h	/^int sigaddset (sigset_t *set, int signum);$/;"	p	signature:(sigset_t *set, int signum)
sigaltstack	libc.h	/^int sigaltstack (const stack_t *restrict stack, stack_t *restrict oldstack);$/;"	p	signature:(const stack_t *restrict stack, stack_t *restrict oldstack)
sigblock	libc.h	/^int sigblock (int mask);$/;"	p	signature:(int mask)
sigdelset	libc.h	/^int sigdelset (sigset_t *set, int signum);$/;"	p	signature:(sigset_t *set, int signum)
sigemptyset	libc.h	/^int sigemptyset (sigset_t *set);$/;"	p	signature:(sigset_t *set)
sigfillset	libc.h	/^int sigfillset (sigset_t *set);$/;"	p	signature:(sigset_t *set)
siginterrupt	libc.h	/^int siginterrupt (int signum, int failflag);$/;"	p	signature:(int signum, int failflag)
sigismember	libc.h	/^int sigismember (const sigset_t *set, int signum);$/;"	p	signature:(const sigset_t *set, int signum)
siglongjmp	libc.h	/^void siglongjmp (sigjmp_buf state, int value);$/;"	p	signature:(sigjmp_buf state, int value)
signal	libc.h	/^sighandler_t signal (int signum, sighandler_t action);$/;"	p	signature:(int signum, sighandler_t action)
signbit	libc.h	/^int signbit (float-type x);$/;"	p	signature:(float-type x)
significand	libc.h	/^long long int significand (double x);$/;"	p	signature:(double x)
sigpause	libc.h	/^int sigpause (int mask);$/;"	p	signature:(int mask)
sigpending	libc.h	/^int sigpending (sigset_t *set);$/;"	p	signature:(sigset_t *set)
sigprocmask	libc.h	/^int sigprocmask (int how, const sigset_t *restrict set, sigset_t *restrict oldset);$/;"	p	signature:(int how, const sigset_t *restrict set, sigset_t *restrict oldset)
sigsetjmp	libc.h	/^int sigsetjmp (sigjmp_buf state, int savesigs);$/;"	p	signature:(sigjmp_buf state, int savesigs)
sigsetmask	libc.h	/^int sigsetmask (int mask);$/;"	p	signature:(int mask)
sigstack	libc.h	/^int sigstack (const struct sigstack *stack, struct sigstack *oldstack);$/;"	p	signature:(const struct sigstack *stack, struct sigstack *oldstack)
sigsuspend	libc.h	/^int sigsuspend (const sigset_t *set);$/;"	p	signature:(const sigset_t *set)
sigvec	libc.h	/^int sigvec (int signum, const struct sigvec *action,struct sigvec *old-action);$/;"	p	signature:(int signum, const struct sigvec *action,struct sigvec *old-action)
sin	libc.h	/^double sin (double x);$/;"	p	signature:(double x)
sincos	libc.h	/^void sincos (double x, double *sinx, double *cosx);$/;"	p	signature:(double x, double *sinx, double *cosx)
sinh	libc.h	/^double sinh (double x);$/;"	p	signature:(double x)
sleep	libc.h	/^unsigned int sleep (unsigned int seconds);$/;"	p	signature:(unsigned int seconds)
snprintf	libc.h	/^int snprintf (char *s, size_t size, const char *format, ...);$/;"	p	signature:(char *s, size_t size, const char *format, ...)
socket	libc.h	/^int socket (int namespace, int style, int protocol);$/;"	p	signature:(int namespace, int style, int protocol)
socketpair	libc.h	/^int socketpair (int namespace, int style, int protocol, int filedes[2]);$/;"	p	signature:(int namespace, int style, int protocol, int filedes[2])
sprintf	libc.h	/^int sprintf (char *s, const char *format, ...);$/;"	p	signature:(char *s, const char *format, ...)
sqrt	libc.h	/^double sqrt (double x);$/;"	p	signature:(double x)
srand	libc.h	/^void srand (unsigned int seed);$/;"	p	signature:(unsigned int seed)
srand48	libc.h	/^void srand48 (long int seedval);$/;"	p	signature:(long int seedval)
srand48_r	libc.h	/^int srand48_r (long int seedval, struct drand48_data *buffer);$/;"	p	signature:(long int seedval, struct drand48_data *buffer)
srandom	libc.h	/^void srandom (unsigned int seed);$/;"	p	signature:(unsigned int seed)
srandom_r	libc.h	/^int srandom_r (unsigned int seed, struct random_data *buf);$/;"	p	signature:(unsigned int seed, struct random_data *buf)
sscanf	libc.h	/^int sscanf (const char *s, const char *format, ...);$/;"	p	signature:(const char *s, const char *format, ...)
ssignal	libc.h	/^sighandler_t ssignal (int signum, sighandler_t action);$/;"	p	signature:(int signum, sighandler_t action)
stat	libc.h	/^int stat (const char *filename, struct stat *buf);$/;"	p	signature:(const char *filename, struct stat *buf)
stat64	libc.h	/^int stat64 (const char *filename, struct stat64 *buf);$/;"	p	signature:(const char *filename, struct stat64 *buf)
stime	libc.h	/^int stime (time_t *newtime);$/;"	p	signature:(time_t *newtime)
stpcpy	libc.h	/^char * stpcpy (char *restrict to, const char *restrict from);$/;"	p	signature:(char *restrict to, const char *restrict from)
stpncpy	libc.h	/^char * stpncpy (char *restrict to, const char *restrict from, size_t size);$/;"	p	signature:(char *restrict to, const char *restrict from, size_t size)
strcasecmp	libc.h	/^int strcasecmp (const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcasestr	libc.h	/^char * strcasestr (const char *haystack, const char *needle);$/;"	p	signature:(const char *haystack, const char *needle)
strcat	libc.h	/^char * strcat (char *restrict to, const char *restrict from);$/;"	p	signature:(char *restrict to, const char *restrict from)
strchr	libc.h	/^char * strchr (const char *string, int c);$/;"	p	signature:(const char *string, int c)
strchrnul	libc.h	/^char * strchrnul (const char *string, int c);$/;"	p	signature:(const char *string, int c)
strcmp	libc.h	/^int strcmp (const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcoll	libc.h	/^int strcoll (const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcpy	libc.h	/^char * strcpy (char *restrict to, const char *restrict from);$/;"	p	signature:(char *restrict to, const char *restrict from)
strcspn	libc.h	/^size_t strcspn (const char *string, const char *stopset);$/;"	p	signature:(const char *string, const char *stopset)
strdup	libc.h	/^char * strdup (const char *s);$/;"	p	signature:(const char *s)
strerror	libc.h	/^char * strerror (int errnum);$/;"	p	signature:(int errnum)
strerror_r	libc.h	/^char * strerror_r (int errnum, char *buf, size_t n);$/;"	p	signature:(int errnum, char *buf, size_t n)
strfmon	libc.h	/^ssize_t strfmon (char *s, size_t maxsize, const char *format, ...);$/;"	p	signature:(char *s, size_t maxsize, const char *format, ...)
strfry	libc.h	/^char * strfry (char *string);$/;"	p	signature:(char *string)
strftime	libc.h	/^size_t strftime (char *s, size_t size, const char *format, const struct tm *brokentime);$/;"	p	signature:(char *s, size_t size, const char *format, const struct tm *brokentime)
strlen	libc.h	/^size_t strlen (const char *s);$/;"	p	signature:(const char *s)
strncasecmp	libc.h	/^int strncasecmp (const char *s1, const char *s2, size_t n);$/;"	p	signature:(const char *s1, const char *s2, size_t n)
strncat	libc.h	/^char * strncat (char *restrict to, const char *restrict from, size_t size);$/;"	p	signature:(char *restrict to, const char *restrict from, size_t size)
strncmp	libc.h	/^int strncmp (const char *s1, const char *s2, size_t size);$/;"	p	signature:(const char *s1, const char *s2, size_t size)
strncpy	libc.h	/^char * strncpy (char *restrict to, const char *restrict from, size_t size);$/;"	p	signature:(char *restrict to, const char *restrict from, size_t size)
strndup	libc.h	/^char * strndup (const char *s, size_t size);$/;"	p	signature:(const char *s, size_t size)
strnlen	libc.h	/^size_t strnlen (const char *s, size_t maxlen);$/;"	p	signature:(const char *s, size_t maxlen)
strpbrk	libc.h	/^char * strpbrk (const char *string, const char *stopset);$/;"	p	signature:(const char *string, const char *stopset)
strptime	libc.h	/^char * strptime (const char *s, const char *fmt, struct tm *tp);$/;"	p	signature:(const char *s, const char *fmt, struct tm *tp)
strrchr	libc.h	/^char * strrchr (const char *string, int c);$/;"	p	signature:(const char *string, int c)
strsep	libc.h	/^char * strsep (char **string_ptr, const char *delimiter);$/;"	p	signature:(char **string_ptr, const char *delimiter)
strsignal	libc.h	/^char * strsignal (int signum);$/;"	p	signature:(int signum)
strspn	libc.h	/^size_t strspn (const char *string, const char *skipset);$/;"	p	signature:(const char *string, const char *skipset)
strstr	libc.h	/^char * strstr (const char *haystack, const char *needle);$/;"	p	signature:(const char *haystack, const char *needle)
strtod	libc.h	/^double strtod (const char *restrict string, char **restrict tailptr);$/;"	p	signature:(const char *restrict string, char **restrict tailptr)
strtof	libc.h	/^float strtof (const char *string, char **tailptr);$/;"	p	signature:(const char *string, char **tailptr)
strtoimax	libc.h	/^intmax_t strtoimax (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtok	libc.h	/^char * strtok (char *restrict newstring, const char *restrict delimiters);$/;"	p	signature:(char *restrict newstring, const char *restrict delimiters)
strtok_r	libc.h	/^char * strtok_r (char *newstring, const char *delimiters, char **save_ptr);$/;"	p	signature:(char *newstring, const char *delimiters, char **save_ptr)
strtol	libc.h	/^long int strtol (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtoll	libc.h	/^long long int strtoll (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtoq	libc.h	/^long long int strtoq (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtoul	libc.h	/^unsigned long int strtoul (const char *retrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *retrict string, char **restrict tailptr, int base)
strtoull	libc.h	/^unsigned long long int strtoull (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtoumax	libc.h	/^uintmax_t strtoumax (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strtouq	libc.h	/^unsigned long long int strtouq (const char *restrict string, char **restrict tailptr, int base);$/;"	p	signature:(const char *restrict string, char **restrict tailptr, int base)
strverscmp	libc.h	/^int strverscmp (const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strxfrm	libc.h	/^size_t strxfrm (char *restrict to, const char *restrict from, size_t size);$/;"	p	signature:(char *restrict to, const char *restrict from, size_t size)
stty	libc.h	/^int stty (int filedes, struct sgttyb * attributes);$/;"	p	signature:(int filedes, struct sgttyb * attributes)
swapcontext	libc.h	/^int swapcontext (ucontext_t *restrict oucp, const ucontext_t *restrict ucp);$/;"	p	signature:(ucontext_t *restrict oucp, const ucontext_t *restrict ucp)
swprintf	libc.h	/^int swprintf (wchar_t *s, size_t size, const wchar_t *format, ...);$/;"	p	signature:(wchar_t *s, size_t size, const wchar_t *format, ...)
swscanf	libc.h	/^int swscanf (const wchar_t *ws, const char *format, ...);$/;"	p	signature:(const wchar_t *ws, const char *format, ...)
symlink	libc.h	/^int symlink (const char *oldname, const char *newname);$/;"	p	signature:(const char *oldname, const char *newname)
sync	libc.h	/^int sync (void);$/;"	p	signature:(void)
syscall	libc.h	/^long int syscall (long int sysno, ...);$/;"	p	signature:(long int sysno, ...)
sysconf	libc.h	/^long int sysconf (int parameter);$/;"	p	signature:(int parameter)
sysctl	libc.h	/^int sysctl (int *names, int nlen, void *oldval, size_t *oldlenp, void *newval, size_t newlen);$/;"	p	signature:(int *names, int nlen, void *oldval, size_t *oldlenp, void *newval, size_t newlen)
syslog	libc.h	/^void syslog (int facility_priority, char *format, ...);$/;"	p	signature:(int facility_priority, char *format, ...)
system	libc.h	/^int system (const char *command);$/;"	p	signature:(const char *command)
sysv_signal	libc.h	/^sighandler_t sysv_signal (int signum, sighandler_t action);$/;"	p	signature:(int signum, sighandler_t action)
tan	libc.h	/^double tan (double x);$/;"	p	signature:(double x)
tanh	libc.h	/^double tanh (double x);$/;"	p	signature:(double x)
tcdrain	libc.h	/^int tcdrain (int filedes);$/;"	p	signature:(int filedes)
tcflow	libc.h	/^int tcflow (int filedes, int action);$/;"	p	signature:(int filedes, int action)
tcflush	libc.h	/^int tcflush (int filedes, int queue);$/;"	p	signature:(int filedes, int queue)
tcgetattr	libc.h	/^int tcgetattr (int filedes, struct termios *termios-p);$/;"	p	signature:(int filedes, struct termios *termios-p)
tcgetpgrp	libc.h	/^pid_t tcgetpgrp (int filedes);$/;"	p	signature:(int filedes)
tcgetsid	libc.h	/^pid_t tcgetsid (int fildes);$/;"	p	signature:(int fildes)
tcsendbreak	libc.h	/^int tcsendbreak (int filedes, int duration);$/;"	p	signature:(int filedes, int duration)
tcsetattr	libc.h	/^int tcsetattr (int filedes, int when, const struct termios *termios-p);$/;"	p	signature:(int filedes, int when, const struct termios *termios-p)
tcsetpgrp	libc.h	/^int tcsetpgrp (int filedes, pid_t pgid);$/;"	p	signature:(int filedes, pid_t pgid)
tdelete	libc.h	/^void * tdelete (const void *key, void **rootp, comparison_fn_t compar);$/;"	p	signature:(const void *key, void **rootp, comparison_fn_t compar)
tdestroy	libc.h	/^void tdestroy (void *vroot, __free_fn_t freefct);$/;"	p	signature:(void *vroot, __free_fn_t freefct)
telldir	libc.h	/^long int telldir (DIR *dirstream);$/;"	p	signature:(DIR *dirstream)
tempnam	libc.h	/^char * tempnam (const char *dir, const char *prefix);$/;"	p	signature:(const char *dir, const char *prefix)
textdomain	libc.h	/^char * textdomain (const char *domainname);$/;"	p	signature:(const char *domainname)
tfind	libc.h	/^void * tfind (const void *key, void *const *rootp, comparison_fn_t compar);$/;"	p	signature:(const void *key, void *const *rootp, comparison_fn_t compar)
tgamma	libc.h	/^double tgamma (double x);$/;"	p	signature:(double x)
time	libc.h	/^time_t time (time_t *result);$/;"	p	signature:(time_t *result)
timegm	libc.h	/^time_t timegm (struct tm *brokentime);$/;"	p	signature:(struct tm *brokentime)
timelocal	libc.h	/^time_t timelocal (struct tm *brokentime);$/;"	p	signature:(struct tm *brokentime)
times	libc.h	/^clock_t times (struct tms *buffer);$/;"	p	signature:(struct tms *buffer)
tmpfile	libc.h	/^FILE * tmpfile (void);$/;"	p	signature:(void)
tmpfile64	libc.h	/^FILE * tmpfile64 (void);$/;"	p	signature:(void)
tmpnam	libc.h	/^char * tmpnam (char *result);$/;"	p	signature:(char *result)
tmpnam_r	libc.h	/^char * tmpnam_r (char *result);$/;"	p	signature:(char *result)
toascii	libc.h	/^int toascii (int c);$/;"	p	signature:(int c)
tolower	libc.h	/^int tolower (int c);$/;"	p	signature:(int c)
toupper	libc.h	/^int toupper (int c);$/;"	p	signature:(int c)
towctrans	libc.h	/^wint_t towctrans (wint_t wc, wctrans_t desc);$/;"	p	signature:(wint_t wc, wctrans_t desc)
towlower	libc.h	/^wint_t towlower (wint_t wc);$/;"	p	signature:(wint_t wc)
towupper	libc.h	/^wint_t towupper (wint_t wc);$/;"	p	signature:(wint_t wc)
trunc	libc.h	/^double trunc (double x);$/;"	p	signature:(double x)
truncate	libc.h	/^int truncate (const char *filename, off_t length);$/;"	p	signature:(const char *filename, off_t length)
truncate64	libc.h	/^int truncate64 (const char *name, off64_t length);$/;"	p	signature:(const char *name, off64_t length)
tsearch	libc.h	/^void * tsearch (const void *key, void **rootp, comparison_fn_t compar);$/;"	p	signature:(const void *key, void **rootp, comparison_fn_t compar)
ttyname	libc.h	/^char * ttyname (int filedes);$/;"	p	signature:(int filedes)
ttyname_r	libc.h	/^int ttyname_r (int filedes, char *buf, size_t len);$/;"	p	signature:(int filedes, char *buf, size_t len)
twalk	libc.h	/^void twalk (const void *root, __action_fn_t action);$/;"	p	signature:(const void *root, __action_fn_t action)
tzset	libc.h	/^void tzset (void);$/;"	p	signature:(void)
ulimit	libc.h	/^int ulimit (int cmd, ...);$/;"	p	signature:(int cmd, ...)
umask	libc.h	/^mode_t umask (mode_t mask);$/;"	p	signature:(mode_t mask)
umount	libc.h	/^int umount (const char *file);$/;"	p	signature:(const char *file)
umount2	libc.h	/^int umount2 (const char *file, int flags);$/;"	p	signature:(const char *file, int flags)
uname	libc.h	/^int uname (struct utsname *info);$/;"	p	signature:(struct utsname *info)
ungetc	libc.h	/^int ungetc (int c, FILE *stream);$/;"	p	signature:(int c, FILE *stream)
ungetwc	libc.h	/^wint_t ungetwc (wint_t wc, FILE *stream);$/;"	p	signature:(wint_t wc, FILE *stream)
unlink	libc.h	/^int unlink (const char *filename);$/;"	p	signature:(const char *filename)
unlockpt	libc.h	/^int unlockpt (int filedes);$/;"	p	signature:(int filedes)
unsetenv	libc.h	/^int unsetenv (const char *name);$/;"	p	signature:(const char *name)
updwtmp	libc.h	/^void updwtmp (const char *wtmp_file, const struct utmp *utmp);$/;"	p	signature:(const char *wtmp_file, const struct utmp *utmp)
utime	libc.h	/^int utime (const char *filename, const struct utimbuf *times);$/;"	p	signature:(const char *filename, const struct utimbuf *times)
utimes	libc.h	/^int utimes (const char *filename, struct timeval tvp[2]);$/;"	p	signature:(const char *filename, struct timeval tvp[2])
utmpname	libc.h	/^int utmpname (const char *file);$/;"	p	signature:(const char *file)
utmpxname	libc.h	/^int utmpxname (const char *file);$/;"	p	signature:(const char *file)
valloc	libc.h	/^void * valloc (size_t size);$/;"	p	signature:(size_t size)
vasprintf	libc.h	/^int vasprintf (char **ptr, const char *format, va_list ap);$/;"	p	signature:(char **ptr, const char *format, va_list ap)
verr	libc.h	/^void verr (int status, const char *format, va_list);$/;"	p	signature:(int status, const char *format, va_list)
verrx	libc.h	/^void verrx (int status, const char *format, va_list);$/;"	p	signature:(int status, const char *format, va_list)
versionsort	libc.h	/^int versionsort (const void *a, const void *b);$/;"	p	signature:(const void *a, const void *b)
versionsort64	libc.h	/^int versionsort64 (const void *a, const void *b);$/;"	p	signature:(const void *a, const void *b)
vfork	libc.h	/^pid_t vfork (void);$/;"	p	signature:(void)
vfprintf	libc.h	/^int vfprintf (FILE *stream, const char *format, va_list ap);$/;"	p	signature:(FILE *stream, const char *format, va_list ap)
vfscanf	libc.h	/^int vfscanf (FILE *stream, const char *format, va_list ap);$/;"	p	signature:(FILE *stream, const char *format, va_list ap)
vfwprintf	libc.h	/^int vfwprintf (FILE *stream, const wchar_t *format, va_list ap);$/;"	p	signature:(FILE *stream, const wchar_t *format, va_list ap)
vfwscanf	libc.h	/^int vfwscanf (FILE *stream, const wchar_t *format, va_list ap);$/;"	p	signature:(FILE *stream, const wchar_t *format, va_list ap)
vlimit	libc.h	/^int vlimit (int resource, int limit);$/;"	p	signature:(int resource, int limit)
vprintf	libc.h	/^int vprintf (const char *format, va_list ap);$/;"	p	signature:(const char *format, va_list ap)
vscanf	libc.h	/^int vscanf (const char *format, va_list ap);$/;"	p	signature:(const char *format, va_list ap)
vsnprintf	libc.h	/^int vsnprintf (char *s, size_t size, const char *format, va_list ap);$/;"	p	signature:(char *s, size_t size, const char *format, va_list ap)
vsprintf	libc.h	/^int vsprintf (char *s, const char *format, va_list ap);$/;"	p	signature:(char *s, const char *format, va_list ap)
vsscanf	libc.h	/^int vsscanf (const char *s, const char *format, va_list ap);$/;"	p	signature:(const char *s, const char *format, va_list ap)
vswprintf	libc.h	/^int vswprintf (wchar_t *s, size_t size, const wchar_t *format, va_list ap);$/;"	p	signature:(wchar_t *s, size_t size, const wchar_t *format, va_list ap)
vswscanf	libc.h	/^int vswscanf (const wchar_t *s, const wchar_t *format, va_list ap);$/;"	p	signature:(const wchar_t *s, const wchar_t *format, va_list ap)
vsyslog	libc.h	/^void vsyslog (int facility_priority, char *format, va_list arglist);$/;"	p	signature:(int facility_priority, char *format, va_list arglist)
vtimes	libc.h	/^int vtimes (struct vtimes current, struct vtimes child);$/;"	p	signature:(struct vtimes current, struct vtimes child)
vwarn	libc.h	/^void vwarn (const char *format, va_list);$/;"	p	signature:(const char *format, va_list)
vwarnx	libc.h	/^void vwarnx (const char *format, va_list);$/;"	p	signature:(const char *format, va_list)
vwprintf	libc.h	/^int vwprintf (const wchar_t *format, va_list ap);$/;"	p	signature:(const wchar_t *format, va_list ap)
vwscanf	libc.h	/^int vwscanf (const wchar_t *format, va_list ap);$/;"	p	signature:(const wchar_t *format, va_list ap)
wait	libc.h	/^pid_t wait (int *status-ptr);$/;"	p	signature:(int *status-ptr)
wait3	libc.h	/^pid_t wait3 (union wait *status-ptr, int options, struct rusage *usage);$/;"	p	signature:(union wait *status-ptr, int options, struct rusage *usage)
wait4	libc.h	/^pid_t wait4 (pid_t pid, int *status-ptr, int options, struct rusage *usage);$/;"	p	signature:(pid_t pid, int *status-ptr, int options, struct rusage *usage)
waitpid	libc.h	/^pid_t waitpid (pid_t pid, int *status-ptr, int options);$/;"	p	signature:(pid_t pid, int *status-ptr, int options)
warn	libc.h	/^void warn (const char *format, ...);$/;"	p	signature:(const char *format, ...)
warnx	libc.h	/^void warnx (const char *format, ...);$/;"	p	signature:(const char *format, ...)
wcpcpy	libc.h	/^wchar_t * wcpcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom)
wcpncpy	libc.h	/^wchar_t * wcpncpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wcrtomb	libc.h	/^size_t wcrtomb (char *restrict s, wchar_t wc, mbstate_t *restrict ps);$/;"	p	signature:(char *restrict s, wchar_t wc, mbstate_t *restrict ps)
wcscasecmp	libc.h	/^int wcscasecmp (const wchar_t *ws1, const wchar_T *ws2);$/;"	p	signature:(const wchar_t *ws1, const wchar_T *ws2)
wcscat	libc.h	/^wchar_t * wcscat (wchar_t *restrict wto, const wchar_t *restrict wfrom);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom)
wcschr	libc.h	/^wchar_t * wcschr (const wchar_t *wstring, int wc);$/;"	p	signature:(const wchar_t *wstring, int wc)
wcschrnul	libc.h	/^wchar_t * wcschrnul (const wchar_t *wstring, wchar_t wc);$/;"	p	signature:(const wchar_t *wstring, wchar_t wc)
wcscmp	libc.h	/^int wcscmp (const wchar_t *ws1, const wchar_t *ws2);$/;"	p	signature:(const wchar_t *ws1, const wchar_t *ws2)
wcscoll	libc.h	/^int wcscoll (const wchar_t *ws1, const wchar_t *ws2);$/;"	p	signature:(const wchar_t *ws1, const wchar_t *ws2)
wcscpy	libc.h	/^wchar_t * wcscpy (wchar_t *restrict wto, const wchar_t *restrict wfrom);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom)
wcscspn	libc.h	/^size_t wcscspn (const wchar_t *wstring, const wchar_t *stopset);$/;"	p	signature:(const wchar_t *wstring, const wchar_t *stopset)
wcsdup	libc.h	/^wchar_t * wcsdup (const wchar_t *ws);$/;"	p	signature:(const wchar_t *ws)
wcsftime	libc.h	/^size_t wcsftime (wchar_t *s, size_t size, const wchar_t *format, const struct tm *brokentime);$/;"	p	signature:(wchar_t *s, size_t size, const wchar_t *format, const struct tm *brokentime)
wcslen	libc.h	/^size_t wcslen (const wchar_t *ws);$/;"	p	signature:(const wchar_t *ws)
wcsncasecmp	libc.h	/^int wcsncasecmp (const wchar_t *ws1, const wchar_t *s2, size_t n);$/;"	p	signature:(const wchar_t *ws1, const wchar_t *s2, size_t n)
wcsncat	libc.h	/^wchar_t * wcsncat (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wcsncmp	libc.h	/^int wcsncmp (const wchar_t *ws1, const wchar_t *ws2, size_t size);$/;"	p	signature:(const wchar_t *ws1, const wchar_t *ws2, size_t size)
wcsncpy	libc.h	/^wchar_t * wcsncpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wcsnlen	libc.h	/^size_t wcsnlen (const wchar_t *ws, size_t maxlen);$/;"	p	signature:(const wchar_t *ws, size_t maxlen)
wcsnrtombs	libc.h	/^size_t wcsnrtombs (char *restrict dst, const wchar_t **restrict src, size_t nwc, size_t len, mbstate_t *restrict ps);$/;"	p	signature:(char *restrict dst, const wchar_t **restrict src, size_t nwc, size_t len, mbstate_t *restrict ps)
wcspbrk	libc.h	/^wchar_t * wcspbrk (const wchar_t *wstring, const wchar_t *stopset);$/;"	p	signature:(const wchar_t *wstring, const wchar_t *stopset)
wcsrchr	libc.h	/^wchar_t * wcsrchr (const wchar_t *wstring, wchar_t c);$/;"	p	signature:(const wchar_t *wstring, wchar_t c)
wcsrtombs	libc.h	/^size_t wcsrtombs (char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps);$/;"	p	signature:(char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps)
wcsspn	libc.h	/^size_t wcsspn (const wchar_t *wstring, const wchar_t *skipset);$/;"	p	signature:(const wchar_t *wstring, const wchar_t *skipset)
wcsstr	libc.h	/^wchar_t * wcsstr (const wchar_t *haystack, const wchar_t *needle);$/;"	p	signature:(const wchar_t *haystack, const wchar_t *needle)
wcstod	libc.h	/^double wcstod (const wchar_t *restrict string, wchar_t **restrict tailptr);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr)
wcstoimax	libc.h	/^intmax_t wcstoimax (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstok	libc.h	/^wchar_t * wcstok (wchar_t *newstring, const char *delimiters);$/;"	p	signature:(wchar_t *newstring, const char *delimiters)
wcstol	libc.h	/^long int wcstol (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstoll	libc.h	/^long long int wcstoll (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstombs	libc.h	/^size_t wcstombs (char *string, const wchar_t *wstring, size_t size);$/;"	p	signature:(char *string, const wchar_t *wstring, size_t size)
wcstoq	libc.h	/^long long int wcstoq (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstoul	libc.h	/^unsigned long int wcstoul (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstoull	libc.h	/^unsigned long long int wcstoull (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstoumax	libc.h	/^uintmax_t wcstoumax (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcstouq	libc.h	/^unsigned long long int wcstouq (const wchar_t *restrict string, wchar_t **restrict tailptr, int base);$/;"	p	signature:(const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wcswcs	libc.h	/^wchar_t * wcswcs (const wchar_t *haystack, const wchar_t *needle);$/;"	p	signature:(const wchar_t *haystack, const wchar_t *needle)
wcsxfrm	libc.h	/^size_t wcsxfrm (wchar_t *restrict wto, const wchar_t *wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *wfrom, size_t size)
wctob	libc.h	/^int wctob (wint_t c);$/;"	p	signature:(wint_t c)
wctomb	libc.h	/^int wctomb (char *string, wchar_t wchar);$/;"	p	signature:(char *string, wchar_t wchar)
wctrans	libc.h	/^wctrans_t wctrans (const char *property);$/;"	p	signature:(const char *property)
wctype	libc.h	/^wctype_t wctype (const char *property);$/;"	p	signature:(const char *property)
wmemchr	libc.h	/^wchar_t * wmemchr (const wchar_t *block, wchar_t wc, size_t size);$/;"	p	signature:(const wchar_t *block, wchar_t wc, size_t size)
wmemcmp	libc.h	/^int wmemcmp (const wchar_t *a1, const wchar_t *a2, size_t size);$/;"	p	signature:(const wchar_t *a1, const wchar_t *a2, size_t size)
wmemcpy	libc.h	/^wchar_t * wmemcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wmemmove	libc.h	/^wchar_t * wmemmove (wchar *wto, const wchar_t *wfrom, size_t size);$/;"	p	signature:(wchar *wto, const wchar_t *wfrom, size_t size)
wmempcpy	libc.h	/^wchar_t * wmempcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);$/;"	p	signature:(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wmemset	libc.h	/^wchar_t * wmemset (wchar_t *block, wchar_t wc, size_t size);$/;"	p	signature:(wchar_t *block, wchar_t wc, size_t size)
wordexp	libc.h	/^int wordexp (const char *words, wordexp_t *word-vector-ptr, int flags);$/;"	p	signature:(const char *words, wordexp_t *word-vector-ptr, int flags)
wprintf	libc.h	/^int wprintf (const wchar_t *format, ...);$/;"	p	signature:(const wchar_t *format, ...)
write	libc.h	/^ssize_t write (int filedes, const void *buffer, size_t size);$/;"	p	signature:(int filedes, const void *buffer, size_t size)
writev	libc.h	/^ssize_t writev (int filedes, const struct iovec *vector, int count);$/;"	p	signature:(int filedes, const struct iovec *vector, int count)
wscanf	libc.h	/^int wscanf (const wchar_t *format, ...);$/;"	p	signature:(const wchar_t *format, ...)
y0	libc.h	/^double y0 (double x);$/;"	p	signature:(double x)
y1	libc.h	/^double y1 (double x);$/;"	p	signature:(double x)
yn	libc.h	/^double yn (int n, double x);$/;"	p	signature:(int n, double x)
