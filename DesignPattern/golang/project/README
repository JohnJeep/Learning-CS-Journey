### 方案特点

1. **分层架构**：清晰的数据流（Controller → Service → Repository → Database）
2. **接口隔离**：所有依赖都通过接口进行通信
3. **可测试性**：通过Mock实现快速单元测试
4. **可扩展性**：新增数据库只需实现对应仓储
5. **配置驱动**：通过配置切换数据库类型
6. **依赖倒置**：高层模块不依赖低层具体实现

通过这种设计，系统可以轻松支持多种数据库类型，同时保持业务逻辑的独立性和可维护性。



### `models`层

在分层架构中，`models` 层是**数据模型的抽象表示**，它定义了应用程序中核心业务实体的结构和行为。

| 特性             | 说明                              |
| :--------------- | :-------------------------------- |
| **纯数据结构**   | 不含外部依赖（DB/API等）          |
| **跨层通用**     | 被repository/service/api共用      |
| **业务语义载体** | 体现领域语言（如Account vs User） |
| **变化缓冲层**   | 隔离底层存储与上层业务的变化      |

通过合理设计`models`层，可以实现：

- 业务语义明确化
- 各层解耦
- 变更影响局部化
- 代码可读性提升