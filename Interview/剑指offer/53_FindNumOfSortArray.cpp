/*
 * @Author: your name
 * @Date: 2020-08-20 15:25:15
 * @LastEditTime: 2020-08-21 16:15:14
 * @LastEditors: Please set LastEditors
 * @Description: 题目：在排序数组中查找数字
 *               描述：统计一个数字在排序数组中出现的次数。例如，输入数序树组{1, 2, 3, 3, 3, 3, 4, 5}和数字3，
 *                     由于数字3在这个数组中出现了4四次，因此输出4
 * 
 *               思路：利用二分法递归调用
 *                     1、先查找这个数组的中间数，判断中间数是否等于要查找的数字k，等于则返回中间数的下标
 *                     2、判断中间数的前半段和后半段是包否有k，若前半段包含k，则中间数的下标递减，
 *                        重新获得新的中间数，直到前半段中不再包含数字k时，则返回中间数的下标。
 *                     3、在第一步计算的中间数的后半部分中递归查找是否包含数字k，直到不包含数字k时，返回中间数的下标。
 *                     4、用数组中后半部分中间数的下标减去前半部分中间数的下标，并加1，最终得到数字k出现的次数。
 *                      
 *               
 *               复杂度：O(log(n))
 */
#include <iostream>
#include <cstdio>

using namespace std;

int getBeforeK()
{
    
}


int main(int argc, char *argv[])
{
    
    return 0;
}